{"version":3,"file":"cats.js","sourceRoot":"","sources":["../../cats.ts"],"names":[],"mappings":"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IACxD,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB;IACzD,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB;IAC1D,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB;IACzD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,gBAAgB,EAAE,kBAAkB;IACvD,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB;IACxD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB;IACxD,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB;IACxD,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB;IACxD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB;IACxD,kBAAkB,EAAE,iBAAiB,EAAE,gBAAgB;IACvD,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB;IAC1D,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB;IAC1D,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB;IAC1D,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB;IACzD,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB;IACzD,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB;IACzD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB;IACxD,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB;IACzD,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB;IACzD,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB;IACzD,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB;IACzD,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB;IACzD,kBAAkB,EAAE,gBAAgB,EAAE,kBAAkB;IACxD,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB;IACxD,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB;IACzD,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB;IAC1D,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB;IACxD,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB;IACxD,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB;IACzD,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB;IACxD,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB;IACxD,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB;IACxD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB;IACxD,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB;IACxD,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB;IACxD,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB;IACxD,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB;IACxD,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB;IACxD,gBAAgB,EAAE,gBAAgB,EAAE,kBAAkB;IACtD,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB;IACxD,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB;IACxD,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB;IACxD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB;IACxD,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB;IACzD,gBAAgB,EAAE,kBAAkB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,gBAAgB;IACtD,iBAAiB,EAAE,iBAAiB,EAAE,gBAAgB;IACtD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB;IACvD,iBAAiB,EAAE,gBAAgB,EAAE,iBAAiB;IACtD,iBAAiB,EAAE,iBAAiB,EAAE,iB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","sourcesContent":["/**\n * @license\n * MIT License\n *\n * Copyright (c) 2025 dream\n *\n * This software, \"dream\", is a fork of Google's material-color-utilities\n * (https://github.com/material-foundation/material-color-utilities).\n * While based on and incorporating concepts and code from the original\n * material-color-utilities project, \"hctjs\" is maintained and distributed\n * under the terms of the MIT License as set forth below.\n *\n * The original material-color-utilities project is licensed under the\n * Apache License 2.0.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice, including the\n * acknowledgement of the original material-color-utilities project, shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n// --- Exported Namespace Alias Objects ---\nexport const math = { clampDouble, clampInt, differenceDegrees, lerp, matrixMultiply, rotationDirection, sanitizeDegreesDouble, sanitizeDegreesInt, signum };\nexport const utils = { alphaFromArgb, argbFromLab, argbFromLinrgb, argbFromLstar, argbFromRgb, argbFromXyz, blueFromArgb, delinearized, greenFromArgb, isOpaque, labFromArgb, linearized, lstarFromArgb, lstarFromY, redFromArgb, whitePointD65, xyzFromArgb, yFromLstar };\n// --- End Exported Namespace Alias Objects ---\n\n\n\n// --- BEGIN FILE: blend/blend.ts ---\n// This file is automatically generated. Do not modify it.\n\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\n/**\n * Functions for blending in HCT and CAM16.\n */\nexport class Blend {\n  /**\n   * Blend the design color's HCT hue towards the key color's HCT\n   * hue, in a way that leaves the original color recognizable and\n   * recognizably shifted towards the key color.\n   *\n   * @param designColor ARGB representation of an arbitrary color.\n   * @param sourceColor ARGB representation of the main theme color.\n   * @return The design color with a hue shifted towards the\n   * system's color, a slightly warmer/cooler variant of the design\n   * color's hue.\n   */\n  static harmonize(designColor: number, sourceColor: number): number {\n    const fromHct = Hct.fromInt(designColor);\n    const toHct = Hct.fromInt(sourceColor);\n    const differenceDegrees =\n      math.differenceDegrees(fromHct.hue, toHct.hue);\n    const rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);\n    const outputHue = math.sanitizeDegreesDouble(\n      fromHct.hue +\n      rotationDegrees * math.rotationDirection(fromHct.hue, toHct.hue));\n    return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();\n  }\n\n  /**\n   * Blends hue from one color into another. The chroma and tone of\n   * the original color are maintained.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, with a hue blended towards to. Chroma and tone\n   * are constant.\n   */\n  static hctHue(from: number, to: number, amount: number): number {\n    const ucs = Blend.cam16Ucs(from, to, amount);\n    const ucsCam = Cam16.fromInt(ucs);\n    const fromCam = Cam16.fromInt(from);\n    const blended = Hct.from(\n      ucsCam.hue,\n      fromCam.chroma,\n      utils.lstarFromArgb(from),\n    );\n    return blended.toInt();\n  }\n\n  /**\n   * Blend in CAM16-UCS space.\n   *\n   * @param from ARGB representation of color\n   * @param to ARGB representation of color\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\n   * @return from, blended towards to. Hue, chroma, and tone will\n   * change.\n   */\n  static cam16Ucs(from: number, to: number, amount: number): number {\n    const fromCam = Cam16.fromInt(from);\n    const toCam = Cam16.fromInt(to);\n    const fromJ = fromCam.jstar;\n    const fromA = fromCam.astar;\n    const fromB = fromCam.bstar;\n    const toJ = toCam.jstar;\n    const toA = toCam.astar;\n    const toB = toCam.bstar;\n    const jstar = fromJ + (toJ - fromJ) * amount;\n    const astar = fromA + (toA - fromA) * amount;\n    const bstar = fromB + (toB - fromB) * amount;\n    return Cam16.fromUcs(jstar, astar, bstar).toInt();\n  }\n}\n// --- END FILE: blend/blend.ts ---\n\n\n// --- BEGIN FILE: contrast/contrast.ts ---\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\n\n\n/**\n * Utility methods for calculating contrast given two colors, or calculating a\n * color given one color and a contrast ratio.\n *\n * Contrast ratio is calculated using XYZ's Y. When linearized to match human\n * perception, Y becomes HCT's tone and L*a*b*'s' L*. Informally, this is the\n * lightness of a color.\n *\n * Methods refer to tone, T in the the HCT color space.\n * Tone is equivalent to L* in the L*a*b* color space, or L in the LCH color\n * space.\n */\nexport class Contrast {\n  /**\n   * Returns a contrast ratio, which ranges from 1 to 21.\n   *\n   * @param toneA Tone between 0 and 100. Values outside will be clamped.\n   * @param toneB Tone between 0 and 100. Values outside will be clamped.\n   */\n  static ratioOfTones(toneA: number, toneB: number): number {\n    toneA = math.clampDouble(0.0, 100.0, toneA);\n    toneB = math.clampDouble(0.0, 100.0, toneB);\n    return Contrast.ratioOfYs(utils.yFromLstar(toneA), utils.yFromLstar(toneB));\n  }\n\n  static ratioOfYs(y1: number, y2: number): number {\n    const lighter = y1 > y2 ? y1 : y2;\n    const darker = (lighter === y2) ? y1 : y2;\n    return (lighter + 5.0) / (darker + 5.0);\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns -1 if ratio cannot be achieved with tone parameter.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in -1 being returned.\n   * @param ratio Contrast ratio of return value and tone.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static lighter(tone: number, ratio: number): number {\n    if (tone < 0.0 || tone > 100.0) {\n      return -1.0;\n    }\n\n    const darkY = utils.yFromLstar(tone);\n    const lightY = ratio * (darkY + 5.0) - 5.0;\n    const realContrast = Contrast.ratioOfYs(lightY, darkY);\n    const delta = Math.abs(realContrast - ratio);\n    if (realContrast < ratio && delta > 0.04) {\n      return -1;\n    }\n\n    // Ensure gamut mapping, which requires a 'range' on tone, will still result\n    // the correct ratio by darkening slightly.\n    const returnValue = utils.lstarFromY(lightY) + 0.4;\n    if (returnValue < 0 || returnValue > 100) {\n      return -1;\n    }\n    return returnValue;\n  }\n\n  /**\n   * Returns a tone <= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns -1 if ratio cannot be achieved with tone parameter.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in -1 being returned.\n   * @param ratio Contrast ratio of return value and tone.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static darker(tone: number, ratio: number): number {\n    if (tone < 0.0 || tone > 100.0) {\n      return -1.0;\n    }\n\n    const lightY = utils.yFromLstar(tone);\n    const darkY = ((lightY + 5.0) / ratio) - 5.0;\n    const realContrast = Contrast.ratioOfYs(lightY, darkY);\n\n    const delta = Math.abs(realContrast - ratio);\n    if (realContrast < ratio && delta > 0.04) {\n      return -1;\n    }\n\n    // Ensure gamut mapping, which requires a 'range' on tone, will still result\n    // the correct ratio by darkening slightly.\n    const returnValue = utils.lstarFromY(darkY) - 0.4;\n    if (returnValue < 0 || returnValue > 100) {\n      return -1;\n    }\n    return returnValue;\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns 100 if ratio cannot be achieved with tone parameter.\n   *\n   * This method is unsafe because the returned value is guaranteed to be in\n   * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n   * the ratio with tone. For example, there is no color lighter than T100.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in 100 being returned.\n   * @param ratio Desired contrast ratio of return value and tone parameter.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static lighterUnsafe(tone: number, ratio: number): number {\n    const lighterSafe = Contrast.lighter(tone, ratio);\n    return (lighterSafe < 0.0) ? 100.0 : lighterSafe;\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns 100 if ratio cannot be achieved with tone parameter.\n   *\n   * This method is unsafe because the returned value is guaranteed to be in\n   * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n   * the [ratio with [tone]. For example, there is no color darker than T0.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in 0 being returned.\n   * @param ratio Desired contrast ratio of return value and tone parameter.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static darkerUnsafe(tone: number, ratio: number): number {\n    const darkerSafe = Contrast.darker(tone, ratio);\n    return (darkerSafe < 0.0) ? 0.0 : darkerSafe;\n  }\n}\n// --- END FILE: contrast/contrast.ts ---\n\n\n// --- BEGIN FILE: dislike/dislike_analyzer.ts ---\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\n/**\n * Check and/or fix universally disliked colors.\n * Color science studies of color preference indicate universal distaste for\n * dark yellow-greens, and also show this is correlated to distate for\n * biological waste and rotting food.\n *\n * See Palmer and Schloss, 2010 or Schloss and Palmer's Chapter 21 in Handbook\n * of Color Psychology (2015).\n */\nexport class DislikeAnalyzer {\n  /**\n   * Returns true if a color is disliked.\n   *\n   * @param hct A color to be judged.\n   * @return Whether the color is disliked.\n   *\n   * Disliked is defined as a dark yellow-green that is not neutral.\n   */\n  static isDisliked(hct: Hct): boolean {\n    const huePasses =\n      Math.round(hct.hue) >= 90.0 && Math.round(hct.hue) <= 111.0;\n    const chromaPasses = Math.round(hct.chroma) > 16.0;\n    const tonePasses = Math.round(hct.tone) < 65.0;\n\n    return huePasses && chromaPasses && tonePasses;\n  }\n\n  /**\n   * If a color is disliked, lighten it to make it likable.\n   *\n   * @param hct A color to be judged.\n   * @return A new color if the original color is disliked, or the original\n   *   color if it is acceptable.\n   */\n  static fixIfDisliked(hct: Hct): Hct {\n    if (DislikeAnalyzer.isDisliked(hct)) {\n      return Hct.from(\n        hct.hue,\n        hct.chroma,\n        70.0,\n      );\n    }\n\n    return hct;\n  }\n}\n// --- END FILE: dislike/dislike_analyzer.ts ---\n\n\n// --- BEGIN FILE: dynamiccolor/contrast_curve.ts ---\n/**\n * A class containing a value that changes with the contrast level.\n *\n * Usually represents the contrast requirements for a dynamic color on its\n * background. The four values correspond to values for contrast levels -1.0,\n * 0.0, 0.5, and 1.0, respectively.\n */\nexport class ContrastCurve {\n  /**\n   * Creates a `ContrastCurve` object.\n   *\n   * @param low Value for contrast level -1.0\n   * @param normal Value for contrast level 0.0\n   * @param medium Value for contrast level 0.5\n   * @param high Value for contrast level 1.0\n   */\n  constructor(\n    readonly low: number,\n    readonly normal: number,\n    readonly medium: number,\n    readonly high: number,\n  ) { }\n\n  /**\n   * Returns the value at a given contrast level.\n   *\n   * @param contrastLevel The contrast level. 0.0 is the default (normal); -1.0\n   *     is the lowest; 1.0 is the highest.\n   * @return The value. For contrast ratios, a number between 1.0 and 21.0.\n   */\n  get(contrastLevel: number): number {\n    if (contrastLevel <= -1.0) {\n      return this.low;\n    } else if (contrastLevel < 0.0) {\n      return math.lerp(this.low, this.normal, (contrastLevel - (-1)) / 1);\n    } else if (contrastLevel < 0.5) {\n      return math.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);\n    } else if (contrastLevel < 1.0) {\n      return math.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);\n    } else {\n      return this.high;\n    }\n  }\n}\n// --- END FILE: dynamiccolor/contrast_curve.ts ---\n\n\n// --- BEGIN FILE: dynamiccolor/dynamic_color.ts ---\n/**\n * @param name The name of the dynamic color. Defaults to empty.\n * @param palette Function that provides a TonalPalette given\n * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n * replaces the need to specify hue/chroma. By providing a tonal palette, when\n * contrast adjustments are made, intended chroma can be preserved.\n * @param tone Function that provides a tone given DynamicScheme.\n * @param isBackground Whether this dynamic color is a background, with\n * some other color as the foreground. Defaults to false.\n * @param background The background of the dynamic color (as a function of a\n *     `DynamicScheme`), if it exists.\n * @param secondBackground A second background of the dynamic color (as a\n *     function of a `DynamicScheme`), if it\n * exists.\n * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n * against its background should behave in various contrast levels options.\n * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n * constraint between two colors. One of them must be the color being\n * constructed.\n */\nexport interface FromPaletteOptions {\n  name?: string;\n  palette: (scheme: DynamicScheme) => TonalPalette;\n  tone: (scheme: DynamicScheme) => number;\n  isBackground?: boolean;\n  background?: (scheme: DynamicScheme) => DynamicColor;\n  secondBackground?: (scheme: DynamicScheme) => DynamicColor;\n  contrastCurve?: ContrastCurve;\n  toneDeltaPair?: (scheme: DynamicScheme) => ToneDeltaPair;\n}\n\n/**\n * A color that adjusts itself based on UI state provided by DynamicScheme.\n *\n * Colors without backgrounds do not change tone when contrast changes. Colors\n * with backgrounds become closer to their background as contrast lowers, and\n * further when contrast increases.\n *\n * Prefer static constructors. They require either a hexcode, a palette and\n * tone, or a hue and chroma. Optionally, they can provide a background\n * DynamicColor.\n */\nexport class DynamicColor {\n  private readonly hctCache = new Map<DynamicScheme, Hct>();\n\n  /**\n   * Create a DynamicColor defined by a TonalPalette and HCT tone.\n   *\n   * @param args Functions with DynamicScheme as input. Must provide a palette\n   * and tone. May provide a background DynamicColor and ToneDeltaConstraint.\n   */\n  static fromPalette(args: FromPaletteOptions): DynamicColor {\n    return new DynamicColor(\n      args.name ?? '',\n      args.palette,\n      args.tone,\n      args.isBackground ?? false,\n      args.background,\n      args.secondBackground,\n      args.contrastCurve,\n      args.toneDeltaPair,\n    );\n  }\n\n  /**\n   * The base constructor for DynamicColor.\n   *\n   * _Strongly_ prefer using one of the convenience constructors. This class is\n   * arguably too flexible to ensure it can support any scenario. Functional\n   * arguments allow  overriding without risks that come with subclasses.\n   *\n   * For example, the default behavior of adjust tone at max contrast\n   * to be at a 7.0 ratio with its background is principled and\n   * matches accessibility guidance. That does not mean it's the desired\n   * approach for _every_ design system, and every color pairing,\n   * always, in every case.\n   *\n   * @param name The name of the dynamic color. Defaults to empty.\n   * @param palette Function that provides a TonalPalette given\n   * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n   * replaces the need to specify hue/chroma. By providing a tonal palette, when\n   * contrast adjustments are made, intended chroma can be preserved.\n   * @param tone Function that provides a tone, given a DynamicScheme.\n   * @param isBackground Whether this dynamic color is a background, with\n   * some other color as the foreground. Defaults to false.\n   * @param background The background of the dynamic color (as a function of a\n   *     `DynamicScheme`), if it exists.\n   * @param secondBackground A second background of the dynamic color (as a\n   *     function of a `DynamicScheme`), if it\n   * exists.\n   * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n   * against its background should behave in various contrast levels options.\n   * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n   * constraint between two colors. One of them must be the color being\n   * constructed.\n   */\n  constructor(\n    readonly name: string,\n    readonly palette: (scheme: DynamicScheme) => TonalPalette,\n    readonly tone: (scheme: DynamicScheme) => number,\n    readonly isBackground: boolean,\n    readonly background?: (scheme: DynamicScheme) => DynamicColor,\n    readonly secondBackground?: (scheme: DynamicScheme) => DynamicColor,\n    readonly contrastCurve?: ContrastCurve,\n    readonly toneDeltaPair?: (scheme: DynamicScheme) => ToneDeltaPair,\n  ) {\n    if ((!background) && secondBackground) {\n      throw new Error(\n        `Color ${name} has secondBackground` +\n        `defined, but background is not defined.`);\n    }\n    if ((!background) && contrastCurve) {\n      throw new Error(\n        `Color ${name} has contrastCurve` +\n        `defined, but background is not defined.`);\n    }\n    if (background && !contrastCurve) {\n      throw new Error(\n        `Color ${name} has background` +\n        `defined, but contrastCurve is not defined.`);\n    }\n  }\n\n  /**\n   * Return a ARGB integer (i.e. a hex code).\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getArgb(scheme: DynamicScheme): number {\n    return this.getHct(scheme).toInt();\n  }\n\n  /**\n   * Return a color, expressed in the HCT color space, that this\n   * DynamicColor is under the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getHct(scheme: DynamicScheme): Hct {\n    const cachedAnswer = this.hctCache.get(scheme);\n    if (cachedAnswer != null) {\n      return cachedAnswer;\n    }\n    const tone = this.getTone(scheme);\n    const answer = this.palette(scheme).getHct(tone);\n    if (this.hctCache.size > 4) {\n      this.hctCache.clear();\n    }\n    this.hctCache.set(scheme, answer);\n    return answer;\n  }\n\n  /**\n   * Return a tone, T in the HCT color space, that this DynamicColor is under\n   * the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getTone(scheme: DynamicScheme): number {\n    const decreasingContrast = scheme.contrastLevel < 0;\n\n    // Case 1: dual foreground, pair of colors with delta constraint.\n    if (this.toneDeltaPair) {\n      const toneDeltaPair = this.toneDeltaPair(scheme);\n      const roleA = toneDeltaPair.roleA;\n      const roleB = toneDeltaPair.roleB;\n      const delta = toneDeltaPair.delta;\n      const polarity = toneDeltaPair.polarity;\n      const stayTogether = toneDeltaPair.stayTogether;\n\n      const bg = this.background!(scheme);\n      const bgTone = bg.getTone(scheme);\n\n      const aIsNearer =\n        (polarity === 'nearer' ||\n          (polarity === 'lighter' && !scheme.isDark) ||\n          (polarity === 'darker' && scheme.isDark));\n      const nearer = aIsNearer ? roleA : roleB;\n      const farther = aIsNearer ? roleB : roleA;\n      const amNearer = this.name === nearer.name;\n      const expansionDir = scheme.isDark ? 1 : -1;\n\n      // 1st round: solve to min, each\n      const nContrast = nearer.contrastCurve!.get(scheme.contrastLevel);\n      const fContrast = farther.contrastCurve!.get(scheme.contrastLevel);\n\n      // If a color is good enough, it is not adjusted.\n      // Initial and adjusted tones for `nearer`\n      const nInitialTone = nearer.tone(scheme);\n      let nTone = Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast ?\n        nInitialTone :\n        DynamicColor.foregroundTone(bgTone, nContrast);\n      // Initial and adjusted tones for `farther`\n      const fInitialTone = farther.tone(scheme);\n      let fTone = Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast ?\n        fInitialTone :\n        DynamicColor.foregroundTone(bgTone, fContrast);\n\n      if (decreasingContrast) {\n        // If decreasing contrast, adjust color to the \"bare minimum\"\n        // that satisfies contrast.\n        nTone = DynamicColor.foregroundTone(bgTone, nContrast);\n        fTone = DynamicColor.foregroundTone(bgTone, fContrast);\n      }\n\n      if ((fTone - nTone) * expansionDir >= delta) {\n        // Good! Tones satisfy the constraint; no change needed.\n      } else {\n        // 2nd round: expand farther to match delta.\n        fTone = math.clampDouble(0, 100, nTone + delta * expansionDir);\n        if ((fTone - nTone) * expansionDir >= delta) {\n          // Good! Tones now satisfy the constraint; no change needed.\n        } else {\n          // 3rd round: contract nearer to match delta.\n          nTone = math.clampDouble(0, 100, fTone - delta * expansionDir);\n        }\n      }\n\n      // Avoids the 50-59 awkward zone.\n      if (50 <= nTone && nTone < 60) {\n        // If `nearer` is in the awkward zone, move it away, together with\n        // `farther`.\n        if (expansionDir > 0) {\n          nTone = 60;\n          fTone = Math.max(fTone, nTone + delta * expansionDir);\n        } else {\n          nTone = 49;\n          fTone = Math.min(fTone, nTone + delta * expansionDir);\n        }\n      } else if (50 <= fTone && fTone < 60) {\n        if (stayTogether) {\n          // Fixes both, to avoid two colors on opposite sides of the \"awkward\n          // zone\".\n          if (expansionDir > 0) {\n            nTone = 60;\n            fTone = Math.max(fTone, nTone + delta * expansionDir);\n          } else {\n            nTone = 49;\n            fTone = Math.min(fTone, nTone + delta * expansionDir);\n          }\n        } else {\n          // Not required to stay together; fixes just one.\n          if (expansionDir > 0) {\n            fTone = 60;\n          } else {\n            fTone = 49;\n          }\n        }\n      }\n\n      // Returns `nTone` if this color is `nearer`, otherwise `fTone`.\n      return amNearer ? nTone : fTone;\n    }\n\n    else {\n      // Case 2: No contrast pair; just solve for itself.\n      let answer = this.tone(scheme);\n\n      if (this.background == null) {\n        return answer;  // No adjustment for colors with no background.\n      }\n\n      const bgTone = this.background(scheme).getTone(scheme);\n\n      const desiredRatio = this.contrastCurve!.get(scheme.contrastLevel);\n\n      if (Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {\n        // Don't \"improve\" what's good enough.\n      } else {\n        // Rough improvement.\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (decreasingContrast) {\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (this.isBackground && 50 <= answer && answer < 60) {\n        // Must adjust\n        if (Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {\n          answer = 49;\n        } else {\n          answer = 60;\n        }\n      }\n\n      if (this.secondBackground) {\n        // Case 3: Adjust for dual backgrounds.\n\n        const [bg1, bg2] = [this.background, this.secondBackground];\n        const [bgTone1, bgTone2] =\n          [bg1(scheme).getTone(scheme), bg2(scheme).getTone(scheme)];\n        const [upper, lower] =\n          [Math.max(bgTone1, bgTone2), Math.min(bgTone1, bgTone2)];\n\n        if (Contrast.ratioOfTones(upper, answer) >= desiredRatio &&\n          Contrast.ratioOfTones(lower, answer) >= desiredRatio) {\n          return answer;\n        }\n\n        // The darkest light tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const lightOption = Contrast.lighter(upper, desiredRatio);\n\n        // The lightest dark tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const darkOption = Contrast.darker(lower, desiredRatio);\n\n        // Tones suitable for the foreground.\n        const availables: number[] = [];\n        if (lightOption !== -1) availables.push(lightOption);\n        if (darkOption !== -1) availables.push(darkOption);\n\n        const prefersLight = DynamicColor.tonePrefersLightForeground(bgTone1) ||\n          DynamicColor.tonePrefersLightForeground(bgTone2);\n        if (prefersLight) {\n          return (lightOption < 0) ? 100 : lightOption;\n        }\n        if (availables.length === 1) {\n          return availables[0];\n        }\n        return (darkOption < 0) ? 0 : darkOption;\n      }\n\n      return answer;\n    }\n  }\n\n  /**\n   * Given a background tone, find a foreground tone, while ensuring they reach\n   * a contrast ratio that is as close to [ratio] as possible.\n   *\n   * @param bgTone Tone in HCT. Range is 0 to 100, undefined behavior when it\n   *     falls outside that range.\n   * @param ratio The contrast ratio desired between bgTone and the return\n   *     value.\n   */\n  static foregroundTone(bgTone: number, ratio: number): number {\n    const lighterTone = Contrast.lighterUnsafe(bgTone, ratio);\n    const darkerTone = Contrast.darkerUnsafe(bgTone, ratio);\n    const lighterRatio = Contrast.ratioOfTones(lighterTone, bgTone);\n    const darkerRatio = Contrast.ratioOfTones(darkerTone, bgTone);\n    const preferLighter = DynamicColor.tonePrefersLightForeground(bgTone);\n\n    if (preferLighter) {\n      // This handles an edge case where the initial contrast ratio is high\n      // (ex. 13.0), and the ratio passed to the function is that high\n      // ratio, and both the lighter and darker ratio fails to pass that\n      // ratio.\n      //\n      // This was observed with Tonal Spot's On Primary Container turning\n      // black momentarily between high and max contrast in light mode. PC's\n      // standard tone was T90, OPC's was T10, it was light mode, and the\n      // contrast value was 0.6568521221032331.\n      const negligibleDifference = Math.abs(lighterRatio - darkerRatio) < 0.1 &&\n        lighterRatio < ratio && darkerRatio < ratio;\n      return lighterRatio >= ratio || lighterRatio >= darkerRatio ||\n        negligibleDifference ?\n        lighterTone :\n        darkerTone;\n    } else {\n      return darkerRatio >= ratio || darkerRatio >= lighterRatio ? darkerTone :\n        lighterTone;\n    }\n  }\n\n  /**\n   * Returns whether [tone] prefers a light foreground.\n   *\n   * People prefer white foregrounds on ~T60-70. Observed over time, and also\n   * by Andrew Somers during research for APCA.\n   *\n   * T60 used as to create the smallest discontinuity possible when skipping\n   * down to T49 in order to ensure light foregrounds.\n   * Since `tertiaryContainer` in dark monochrome scheme requires a tone of\n   * 60, it should not be adjusted. Therefore, 60 is excluded here.\n   */\n  static tonePrefersLightForeground(tone: number): boolean {\n    return Math.round(tone) < 60.0;\n  }\n\n  /**\n   * Returns whether [tone] can reach a contrast ratio of 4.5 with a lighter\n   * color.\n   */\n  static toneAllowsLightForeground(tone: number): boolean {\n    return Math.round(tone) <= 49.0;\n  }\n\n  /**\n   * Adjust a tone such that white has 4.5 contrast, if the tone is\n   * reasonably close to supporting it.\n   */\n  static enableLightForeground(tone: number): number {\n    if (DynamicColor.tonePrefersLightForeground(tone) &&\n      !DynamicColor.toneAllowsLightForeground(tone)) {\n      return 49.0;\n    }\n    return tone;\n  }\n}\n// --- END FILE: dynamiccolor/dynamic_color.ts ---\n\n\n// --- BEGIN FILE: dynamiccolor/dynamic_scheme.ts ---\n/**\n * @param sourceColorArgb The source color of the theme as an ARGB 32-bit\n *     integer.\n * @param variant The variant, or style, of the theme.\n * @param contrastLevel Value from -1 to 1. -1 represents minimum contrast,\n * 0 represents standard (i.e. the design as spec'd), and 1 represents maximum\n * contrast.\n * @param isDark Whether the scheme is in dark mode or light mode.\n * @param primaryPalette Given a tone, produces a color. Hue and chroma of the\n * color are specified in the design specification of the variant. Usually\n * colorful.\n * @param secondaryPalette Given a tone, produces a color. Hue and chroma of\n * the color are specified in the design specification of the variant. Usually\n * less colorful.\n * @param tertiaryPalette Given a tone, produces a color. Hue and chroma of\n * the color are specified in the design specification of the variant. Usually\n * a different hue from primary and colorful.\n * @param neutralPalette Given a tone, produces a color. Hue and chroma of the\n * color are specified in the design specification of the variant. Usually not\n * colorful at all, intended for background & surface colors.\n * @param neutralVariantPalette Given a tone, produces a color. Hue and chroma\n * of the color are specified in the design specification of the variant.\n * Usually not colorful, but slightly more colorful than Neutral. Intended for\n * backgrounds & surfaces.\n */\nexport interface DynamicSchemeOptions {\n  sourceColorHct: Hct;\n  variant: Variant;\n  contrastLevel: number;\n  isDark: boolean;\n  primaryPalette: TonalPalette;\n  secondaryPalette: TonalPalette;\n  tertiaryPalette: TonalPalette;\n  neutralPalette: TonalPalette;\n  neutralVariantPalette: TonalPalette;\n  errorPalette?: TonalPalette;\n}\n\n/**\n * Constructed by a set of values representing the current UI state (such as\n * whether or not its dark theme, what the theme style is, etc.), and\n * provides a set of TonalPalettes that can create colors that fit in\n * with the theme style. Used by DynamicColor to resolve into a color.\n */\nexport class DynamicScheme {\n  /**\n   * The source color of the theme as an HCT color.\n   */\n  sourceColorHct: Hct;\n  /**\n   * Given a tone, produces a reddish, colorful, color.\n   */\n  errorPalette: TonalPalette;\n\n  /** The source color of the theme as an ARGB 32-bit integer. */\n  readonly sourceColorArgb: number;\n\n  /** The variant, or style, of the theme. */\n  readonly variant: Variant;\n\n  /**\n   * Value from -1 to 1. -1 represents minimum contrast. 0 represents standard\n   * (i.e. the design as spec'd), and 1 represents maximum contrast.\n   */\n  readonly contrastLevel: number;\n\n  /** Whether the scheme is in dark mode or light mode. */\n  readonly isDark: boolean;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually\n   * colorful.\n   */\n  readonly primaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * less colorful.\n   */\n  readonly secondaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * a different hue from primary and colorful.\n   */\n  readonly tertiaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually not\n   * colorful at all, intended for background & surface colors.\n   */\n  readonly neutralPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma\n   * of the color are specified in the design specification of the variant.\n   * Usually not colorful, but slightly more colorful than Neutral. Intended for\n   * backgrounds & surfaces.\n   */\n  readonly neutralVariantPalette: TonalPalette;\n\n  constructor(args: DynamicSchemeOptions) {\n    this.sourceColorArgb = args.sourceColorHct.toInt();\n    this.variant = args.variant;\n    this.contrastLevel = args.contrastLevel;\n    this.isDark = args.isDark;\n    this.sourceColorHct = args.sourceColorHct;\n    this.primaryPalette = args.primaryPalette;\n    this.secondaryPalette = args.secondaryPalette;\n    this.tertiaryPalette = args.tertiaryPalette;\n    this.neutralPalette = args.neutralPalette;\n    this.neutralVariantPalette = args.neutralVariantPalette;\n    this.errorPalette =\n      args.errorPalette ?? TonalPalette.fromHueAndChroma(25.0, 84.0);\n  }\n\n  /**\n   * Support design spec'ing Dynamic Color by schemes that specify hue\n   * rotations that should be applied at certain breakpoints.\n   * @param sourceColor the source color of the theme, in HCT.\n   * @param hues The \"breakpoints\", i.e. the hues at which a rotation should\n   * be apply.\n   * @param rotations The rotation that should be applied when source color's\n   * hue is >= the same index in hues array, and <= the hue at the next index\n   * in hues array.\n   */\n  static getRotatedHue(sourceColor: Hct, hues: number[], rotations: number[]):\n    number {\n    const sourceHue = sourceColor.hue;\n    if (hues.length !== rotations.length) {\n      throw new Error(`mismatch between hue length ${hues.length} & rotations ${rotations.length}`);\n    }\n    if (rotations.length === 1) {\n      return math.sanitizeDegreesDouble(sourceColor.hue + rotations[0]);\n    }\n    const size = hues.length;\n    for (let i = 0; i <= size - 2; i++) {\n      const thisHue = hues[i];\n      const nextHue = hues[i + 1];\n      if (thisHue < sourceHue && sourceHue < nextHue) {\n        return math.sanitizeDegreesDouble(sourceHue + rotations[i]);\n      }\n    }\n    // If this statement executes, something is wrong, there should have been a\n    // rotation found using the arrays.\n    return sourceHue;\n  }\n\n\n  getArgb(dynamicColor: DynamicColor): number {\n    return dynamicColor.getArgb(this);\n  }\n\n  getHct(dynamicColor: DynamicColor): Hct {\n    return dynamicColor.getHct(this);\n  }\n\n  get primaryPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.primaryPaletteKeyColor);\n  }\n\n  get secondaryPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryPaletteKeyColor);\n  }\n\n  get tertiaryPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryPaletteKeyColor);\n  }\n\n  get neutralPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.neutralPaletteKeyColor);\n  }\n\n  get neutralVariantPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.neutralVariantPaletteKeyColor);\n  }\n\n  get background(): number {\n    return this.getArgb(MaterialDynamicColors.background);\n  }\n\n  get onBackground(): number {\n    return this.getArgb(MaterialDynamicColors.onBackground);\n  }\n\n  get surface(): number {\n    return this.getArgb(MaterialDynamicColors.surface);\n  }\n\n  get surfaceDim(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceDim);\n  }\n\n  get surfaceBright(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceBright);\n  }\n\n  get surfaceContainerLowest(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerLowest);\n  }\n\n  get surfaceContainerLow(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerLow);\n  }\n\n  get surfaceContainer(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainer);\n  }\n\n  get surfaceContainerHigh(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerHigh);\n  }\n\n  get surfaceContainerHighest(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerHighest);\n  }\n\n  get onSurface(): number {\n    return this.getArgb(MaterialDynamicColors.onSurface);\n  }\n\n  get surfaceVariant(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceVariant);\n  }\n\n  get onSurfaceVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onSurfaceVariant);\n  }\n\n  get inverseSurface(): number {\n    return this.getArgb(MaterialDynamicColors.inverseSurface);\n  }\n\n  get inverseOnSurface(): number {\n    return this.getArgb(MaterialDynamicColors.inverseOnSurface);\n  }\n\n  get outline(): number {\n    return this.getArgb(MaterialDynamicColors.outline);\n  }\n\n  get outlineVariant(): number {\n    return this.getArgb(MaterialDynamicColors.outlineVariant);\n  }\n\n  get shadow(): number {\n    return this.getArgb(MaterialDynamicColors.shadow);\n  }\n\n  get scrim(): number {\n    return this.getArgb(MaterialDynamicColors.scrim);\n  }\n\n  get surfaceTint(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceTint);\n  }\n\n  get primary(): number {\n    return this.getArgb(MaterialDynamicColors.primary);\n  }\n\n  get onPrimary(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimary);\n  }\n\n  get primaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.primaryContainer);\n  }\n\n  get onPrimaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimaryContainer);\n  }\n\n  get inversePrimary(): number {\n    return this.getArgb(MaterialDynamicColors.inversePrimary);\n  }\n\n  get secondary(): number {\n    return this.getArgb(MaterialDynamicColors.secondary);\n  }\n\n  get onSecondary(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondary);\n  }\n\n  get secondaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryContainer);\n  }\n\n  get onSecondaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondaryContainer);\n  }\n\n  get tertiary(): number {\n    return this.getArgb(MaterialDynamicColors.tertiary);\n  }\n\n  get onTertiary(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiary);\n  }\n\n  get tertiaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryContainer);\n  }\n\n  get onTertiaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiaryContainer);\n  }\n\n  get error(): number {\n    return this.getArgb(MaterialDynamicColors.error);\n  }\n\n  get onError(): number {\n    return this.getArgb(MaterialDynamicColors.onError);\n  }\n\n  get errorContainer(): number {\n    return this.getArgb(MaterialDynamicColors.errorContainer);\n  }\n\n  get onErrorContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onErrorContainer);\n  }\n\n  get primaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.primaryFixed);\n  }\n\n  get primaryFixedDim(): number {\n    return this.getArgb(MaterialDynamicColors.primaryFixedDim);\n  }\n\n  get onPrimaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimaryFixed);\n  }\n\n  get onPrimaryFixedVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimaryFixedVariant);\n  }\n\n  get secondaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryFixed);\n  }\n\n  get secondaryFixedDim(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryFixedDim);\n  }\n\n  get onSecondaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondaryFixed);\n  }\n\n  get onSecondaryFixedVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondaryFixedVariant);\n  }\n\n  get tertiaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryFixed);\n  }\n\n  get tertiaryFixedDim(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryFixedDim);\n  }\n\n  get onTertiaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiaryFixed);\n  }\n\n  get onTertiaryFixedVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiaryFixedVariant);\n  }\n}\n// --- END FILE: dynamiccolor/dynamic_scheme.ts ---\n\n\n// --- BEGIN FILE: dynamiccolor/material_dynamic_colors.ts ---\nfunction isFidelity(scheme: DynamicScheme): boolean {\n  return scheme.variant === Variant.FIDELITY ||\n    scheme.variant === Variant.CONTENT;\n}\n\nfunction isMonochrome(scheme: DynamicScheme): boolean {\n  return scheme.variant === Variant.MONOCHROME;\n}\n\nfunction findDesiredChromaByTone(\n  hue: number, chroma: number, tone: number,\n  byDecreasingTone: boolean): number {\n  let answer = tone;\n\n  let closestToChroma = Hct.from(hue, chroma, tone);\n  if (closestToChroma.chroma < chroma) {\n    let chromaPeak = closestToChroma.chroma;\n    while (closestToChroma.chroma < chroma) {\n      answer += byDecreasingTone ? -1.0 : 1.0;\n      const potentialSolution = Hct.from(hue, chroma, answer);\n      if (chromaPeak > potentialSolution.chroma) {\n        break;\n      }\n      if (Math.abs(potentialSolution.chroma - chroma) < 0.4) {\n        break;\n      }\n\n      const potentialDelta = Math.abs(potentialSolution.chroma - chroma);\n      const currentDelta = Math.abs(closestToChroma.chroma - chroma);\n      if (potentialDelta < currentDelta) {\n        closestToChroma = potentialSolution;\n      }\n      chromaPeak = Math.max(chromaPeak, potentialSolution.chroma);\n    }\n  }\n\n  return answer;\n}\n\n/**\n * DynamicColors for the colors in the Material Design system.\n */\n// Material Color Utilities namespaces the various utilities it provides.\n// tslint:disable-next-line:class-as-namespace\nexport class MaterialDynamicColors {\n  static contentAccentToneDelta = 15.0;\n  static highestSurface(s: DynamicScheme): DynamicColor {\n    return s.isDark ? MaterialDynamicColors.surfaceBright :\n      MaterialDynamicColors.surfaceDim;\n  }\n\n  static primaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'primary_palette_key_color',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.primaryPalette.keyColor.tone,\n  });\n\n  static secondaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'secondary_palette_key_color',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => s.secondaryPalette.keyColor.tone,\n  });\n\n  static tertiaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'tertiary_palette_key_color',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => s.tertiaryPalette.keyColor.tone,\n  });\n\n  static neutralPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'neutral_palette_key_color',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.neutralPalette.keyColor.tone,\n  });\n\n  static neutralVariantPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'neutral_variant_palette_key_color',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.neutralVariantPalette.keyColor.tone,\n  });\n\n  static background = DynamicColor.fromPalette({\n    name: 'background',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 98,\n    isBackground: true,\n  });\n\n  static onBackground = DynamicColor.fromPalette({\n    name: 'on_background',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.background,\n    contrastCurve: new ContrastCurve(3, 3, 4.5, 7),\n  });\n\n  static surface = DynamicColor.fromPalette({\n    name: 'surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 98,\n    isBackground: true,\n  });\n\n  static surfaceDim = DynamicColor.fromPalette({\n    name: 'surface_dim',\n    palette: (s) => s.neutralPalette,\n    tone: (s) =>\n      s.isDark ? 6 : new ContrastCurve(87, 87, 80, 75).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static surfaceBright = DynamicColor.fromPalette({\n    name: 'surface_bright',\n    palette: (s) => s.neutralPalette,\n    tone: (s) =>\n      s.isDark ? new ContrastCurve(24, 24, 29, 34).get(s.contrastLevel) : 98,\n    isBackground: true,\n  });\n\n  static surfaceContainerLowest = DynamicColor.fromPalette({\n    name: 'surface_container_lowest',\n    palette: (s) => s.neutralPalette,\n    tone: (s) =>\n      s.isDark ? new ContrastCurve(4, 4, 2, 0).get(s.contrastLevel) : 100,\n    isBackground: true,\n  });\n\n  static surfaceContainerLow = DynamicColor.fromPalette({\n    name: 'surface_container_low',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ?\n      new ContrastCurve(10, 10, 11, 12).get(s.contrastLevel) :\n      new ContrastCurve(96, 96, 96, 95).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static surfaceContainer = DynamicColor.fromPalette({\n    name: 'surface_container',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ?\n      new ContrastCurve(12, 12, 16, 20).get(s.contrastLevel) :\n      new ContrastCurve(94, 94, 92, 90).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static surfaceContainerHigh = DynamicColor.fromPalette({\n    name: 'surface_container_high',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ?\n      new ContrastCurve(17, 17, 21, 25).get(s.contrastLevel) :\n      new ContrastCurve(92, 92, 88, 85).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static surfaceContainerHighest = DynamicColor.fromPalette({\n    name: 'surface_container_highest',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ?\n      new ContrastCurve(22, 22, 26, 30).get(s.contrastLevel) :\n      new ContrastCurve(90, 90, 84, 80).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static onSurface = DynamicColor.fromPalette({\n    name: 'on_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static surfaceVariant = DynamicColor.fromPalette({\n    name: 'surface_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 30 : 90,\n    isBackground: true,\n  });\n\n  static onSurfaceVariant = DynamicColor.fromPalette({\n    name: 'on_surface_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 80 : 30,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static inverseSurface = DynamicColor.fromPalette({\n    name: 'inverse_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 20,\n  });\n\n  static inverseOnSurface = DynamicColor.fromPalette({\n    name: 'inverse_on_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 20 : 95,\n    background: (s) => MaterialDynamicColors.inverseSurface,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static outline = DynamicColor.fromPalette({\n    name: 'outline',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 60 : 50,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1.5, 3, 4.5, 7),\n  });\n\n  static outlineVariant = DynamicColor.fromPalette({\n    name: 'outline_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 30 : 80,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n  });\n\n  static shadow = DynamicColor.fromPalette({\n    name: 'shadow',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => 0,\n  });\n\n  static scrim = DynamicColor.fromPalette({\n    name: 'scrim',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => 0,\n  });\n\n  static surfaceTint = DynamicColor.fromPalette({\n    name: 'surface_tint',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n  });\n\n  static primary = DynamicColor.fromPalette({\n    name: 'primary',\n    palette: (s) => s.primaryPalette,\n    tone:\n      (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 100 : 0;\n        }\n        return s.isDark ? 80 : 40;\n      },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.primaryContainer, MaterialDynamicColors.primary,\n      10, 'nearer', false),\n  });\n\n  static onPrimary = DynamicColor.fromPalette({\n    name: 'on_primary',\n    palette: (s) => s.primaryPalette,\n    tone:\n      (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 10 : 90;\n        }\n        return s.isDark ? 20 : 100;\n      },\n    background: (s) => MaterialDynamicColors.primary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static primaryContainer = DynamicColor.fromPalette({\n    name: 'primary_container',\n    palette: (s) => s.primaryPalette,\n    tone:\n      (s) => {\n        if (isFidelity(s)) {\n          return s.sourceColorHct.tone;\n        }\n        if (isMonochrome(s)) {\n          return s.isDark ? 85 : 25;\n        }\n        return s.isDark ? 30 : 90;\n      },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.primaryContainer, MaterialDynamicColors.primary,\n      10, 'nearer', false),\n  });\n\n  static onPrimaryContainer = DynamicColor.fromPalette({\n    name: 'on_primary_container',\n    palette: (s) => s.primaryPalette,\n    tone:\n      (s) => {\n        if (isFidelity(s)) {\n          return DynamicColor.foregroundTone(\n            MaterialDynamicColors.primaryContainer.tone(s), 4.5);\n        }\n        if (isMonochrome(s)) {\n          return s.isDark ? 0 : 100;\n        }\n        return s.isDark ? 90 : 30;\n      },\n    background: (s) => MaterialDynamicColors.primaryContainer,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static inversePrimary = DynamicColor.fromPalette({\n    name: 'inverse_primary',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.isDark ? 40 : 80,\n    background: (s) => MaterialDynamicColors.inverseSurface,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n  });\n\n  static secondary = DynamicColor.fromPalette({\n    name: 'secondary',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.secondaryContainer,\n      MaterialDynamicColors.secondary, 10, 'nearer', false),\n  });\n\n  static onSecondary = DynamicColor.fromPalette({\n    name: 'on_secondary',\n    palette: (s) => s.secondaryPalette,\n    tone:\n      (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 10 : 100;\n        } else {\n          return s.isDark ? 20 : 100;\n        }\n      },\n    background: (s) => MaterialDynamicColors.secondary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static secondaryContainer = DynamicColor.fromPalette({\n    name: 'secondary_container',\n    palette: (s) => s.secondaryPalette,\n    tone:\n      (s) => {\n        const initialTone = s.isDark ? 30 : 90;\n        if (isMonochrome(s)) {\n          return s.isDark ? 30 : 85;\n        }\n        if (!isFidelity(s)) {\n          return initialTone;\n        }\n        return findDesiredChromaByTone(\n          s.secondaryPalette.hue, s.secondaryPalette.chroma, initialTone,\n          s.isDark ? false : true);\n      },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.secondaryContainer,\n      MaterialDynamicColors.secondary, 10, 'nearer', false),\n  });\n\n  static onSecondaryContainer = DynamicColor.fromPalette({\n    name: 'on_secondary_container',\n    palette: (s) => s.secondaryPalette,\n    tone:\n      (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 90 : 10;\n        }\n        if (!isFidelity(s)) {\n          return s.isDark ? 90 : 30;\n        }\n        return DynamicColor.foregroundTone(\n          MaterialDynamicColors.secondaryContainer.tone(s), 4.5);\n      },\n    background: (s) => MaterialDynamicColors.secondaryContainer,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static tertiary = DynamicColor.fromPalette({\n    name: 'tertiary',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n      (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 90 : 25;\n        }\n        return s.isDark ? 80 : 40;\n      },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.tertiaryContainer, MaterialDynamicColors.tertiary,\n      10, 'nearer', false),\n  });\n\n  static onTertiary = DynamicColor.fromPalette({\n    name: 'on_tertiary',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n      (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 10 : 90;\n        }\n        return s.isDark ? 20 : 100;\n      },\n    background: (s) => MaterialDynamicColors.tertiary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static tertiaryContainer = DynamicColor.fromPalette({\n    name: 'tertiary_container',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n      (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 60 : 49;\n        }\n        if (!isFidelity(s)) {\n          return s.isDark ? 30 : 90;\n        }\n        const proposedHct = s.tertiaryPalette.getHct(s.sourceColorHct.tone);\n        return DislikeAnalyzer.fixIfDisliked(proposedHct).tone;\n      },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.tertiaryContainer, MaterialDynamicColors.tertiary,\n      10, 'nearer', false),\n  });\n\n  static onTertiaryContainer = DynamicColor.fromPalette({\n    name: 'on_tertiary_container',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n      (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 0 : 100;\n        }\n        if (!isFidelity(s)) {\n          return s.isDark ? 90 : 30;\n        }\n        return DynamicColor.foregroundTone(\n          MaterialDynamicColors.tertiaryContainer.tone(s), 4.5);\n      },\n    background: (s) => MaterialDynamicColors.tertiaryContainer,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static error = DynamicColor.fromPalette({\n    name: 'error',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.errorContainer, MaterialDynamicColors.error, 10,\n      'nearer', false),\n  });\n\n  static onError = DynamicColor.fromPalette({\n    name: 'on_error',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 20 : 100,\n    background: (s) => MaterialDynamicColors.error,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static errorContainer = DynamicColor.fromPalette({\n    name: 'error_container',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 30 : 90,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.errorContainer, MaterialDynamicColors.error, 10,\n      'nearer', false),\n  });\n\n  static onErrorContainer = DynamicColor.fromPalette({\n    name: 'on_error_container',\n    palette: (s) => s.errorPalette,\n    tone:\n      (s) => {\n        if (isMonochrome(s)) {\n          return s.isDark ? 90 : 10;\n        }\n        return s.isDark ? 90 : 30;\n      },\n    background: (s) => MaterialDynamicColors.errorContainer,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static primaryFixed = DynamicColor.fromPalette({\n    name: 'primary_fixed',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 40.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.primaryFixed,\n      MaterialDynamicColors.primaryFixedDim, 10, 'lighter', true),\n  });\n\n  static primaryFixedDim = DynamicColor.fromPalette({\n    name: 'primary_fixed_dim',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 30.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.primaryFixed,\n      MaterialDynamicColors.primaryFixedDim, 10, 'lighter', true),\n  });\n\n  static onPrimaryFixed = DynamicColor.fromPalette({\n    name: 'on_primary_fixed',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 100.0 : 10.0,\n    background: (s) => MaterialDynamicColors.primaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.primaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static onPrimaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_primary_fixed_variant',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 90.0 : 30.0,\n    background: (s) => MaterialDynamicColors.primaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.primaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static secondaryFixed = DynamicColor.fromPalette({\n    name: 'secondary_fixed',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 80.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.secondaryFixed,\n      MaterialDynamicColors.secondaryFixedDim, 10, 'lighter', true),\n  });\n\n  static secondaryFixedDim = DynamicColor.fromPalette({\n    name: 'secondary_fixed_dim',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 70.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.secondaryFixed,\n      MaterialDynamicColors.secondaryFixedDim, 10, 'lighter', true),\n  });\n\n  static onSecondaryFixed = DynamicColor.fromPalette({\n    name: 'on_secondary_fixed',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => 10.0,\n    background: (s) => MaterialDynamicColors.secondaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.secondaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static onSecondaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_secondary_fixed_variant',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 25.0 : 30.0,\n    background: (s) => MaterialDynamicColors.secondaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.secondaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static tertiaryFixed = DynamicColor.fromPalette({\n    name: 'tertiary_fixed',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 40.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.tertiaryFixed,\n      MaterialDynamicColors.tertiaryFixedDim, 10, 'lighter', true),\n  });\n\n  static tertiaryFixedDim = DynamicColor.fromPalette({\n    name: 'tertiary_fixed_dim',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 30.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n      MaterialDynamicColors.tertiaryFixed,\n      MaterialDynamicColors.tertiaryFixedDim, 10, 'lighter', true),\n  });\n\n  static onTertiaryFixed = DynamicColor.fromPalette({\n    name: 'on_tertiary_fixed',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 100.0 : 10.0,\n    background: (s) => MaterialDynamicColors.tertiaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.tertiaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static onTertiaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_tertiary_fixed_variant',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 90.0 : 30.0,\n    background: (s) => MaterialDynamicColors.tertiaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.tertiaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n}\n// --- END FILE: dynamiccolor/material_dynamic_colors.ts ---\n\n\n// --- BEGIN FILE: dynamiccolor/tone_delta_pair.ts ---\n/**\n * Describes the different in tone between colors.\n */\ntype TonePolarity = 'darker' | 'lighter' | 'nearer' | 'farther';\n\n/**\n * Documents a constraint between two DynamicColors, in which their tones must\n * have a certain distance from each other.\n *\n * Prefer a DynamicColor with a background, this is for special cases when\n * designers want tonal distance, literally contrast, between two colors that\n * don't have a background / foreground relationship or a contrast guarantee.\n */\nexport class ToneDeltaPair {\n  /**\n   * Documents a constraint in tone distance between two DynamicColors.\n   *\n   * The polarity is an adjective that describes \"A\", compared to \"B\".\n   *\n   * For instance, ToneDeltaPair(A, B, 15, 'darker', stayTogether) states that\n   * A's tone should be at least 15 darker than B's.\n   *\n   * 'nearer' and 'farther' describes closeness to the surface roles. For\n   * instance, ToneDeltaPair(A, B, 10, 'nearer', stayTogether) states that A\n   * should be 10 lighter than B in light mode, and 10 darker than B in dark\n   * mode.\n   *\n   * @param roleA The first role in a pair.\n   * @param roleB The second role in a pair.\n   * @param delta Required difference between tones. Absolute value, negative\n   * values have undefined behavior.\n   * @param polarity The relative relation between tones of roleA and roleB,\n   * as described above.\n   * @param stayTogether Whether these two roles should stay on the same side of\n   * the \"awkward zone\" (T50-59). This is necessary for certain cases where\n   * one role has two backgrounds.\n   */\n  constructor(\n    readonly roleA: DynamicColor,\n    readonly roleB: DynamicColor,\n    readonly delta: number,\n    readonly polarity: TonePolarity,\n    readonly stayTogether: boolean,\n  ) { }\n}\n// --- END FILE: dynamiccolor/tone_delta_pair.ts ---\n\n\n// --- BEGIN FILE: dynamiccolor/variant.ts ---\n/**\n * Set of themes supported by Dynamic Color.\n * Instantiate the corresponding subclass, ex. SchemeTonalSpot, to create\n * colors corresponding to the theme.\n */\nenum Variant {\n  MONOCHROME,\n  NEUTRAL,\n  TONAL_SPOT,\n  VIBRANT,\n  EXPRESSIVE,\n  FIDELITY,\n  CONTENT,\n  RAINBOW,\n  FRUIT_SALAD\n}\n// --- END FILE: dynamiccolor/variant.ts ---\n\n\n// --- BEGIN FILE: hct/cam16.ts ---\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nexport class Cam16 {\n  /**\n   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n   * the following combinations:\n   *      -  {j or q} and {c, m, or s} and hue\n   *      - jstar, astar, bstar\n   * Prefer using a static method that constructs from 3 of those dimensions.\n   * This constructor is intended for those methods to use to return all\n   * possible dimensions.\n   *\n   * @param hue\n   * @param chroma informally, colorfulness / color intensity. like saturation\n   *     in HSL, except perceptually accurate.\n   * @param j lightness\n   * @param q brightness; ratio of lightness to white point's lightness\n   * @param m colorfulness\n   * @param s saturation; ratio of chroma to white point's chroma\n   * @param jstar CAM16-UCS J coordinate\n   * @param astar CAM16-UCS a coordinate\n   * @param bstar CAM16-UCS b coordinate\n   */\n  constructor(\n    readonly hue: number, readonly chroma: number, readonly j: number,\n    readonly q: number, readonly m: number, readonly s: number,\n    readonly jstar: number, readonly astar: number, readonly bstar: number) { }\n\n  /**\n   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n   * specification, and is used to measure distances between colors.\n   */\n  distance(other: Cam16): number {\n    const dJ = this.jstar - other.jstar;\n    const dA = this.astar - other.astar;\n    const dB = this.bstar - other.bstar;\n    const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n    const dE = 1.41 * Math.pow(dEPrime, 0.63);\n    return dE;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return CAM16 color, assuming the color was viewed in default viewing\n   *     conditions.\n   */\n  static fromInt(argb: number): Cam16 {\n    return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   * @return CAM16 color.\n   */\n  static fromIntInViewingConditions(\n    argb: number, viewingConditions: ViewingConditions): Cam16 {\n    const red = (argb & 0x00ff0000) >> 16;\n    const green = (argb & 0x0000ff00) >> 8;\n    const blue = (argb & 0x000000ff);\n    const redL = utils.linearized(red);\n    const greenL = utils.linearized(green);\n    const blueL = utils.linearized(blue);\n    const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n    const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n    const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);\n    const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);\n    const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);\n\n    const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);\n    const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);\n    const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);\n\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = (atan2 * 180.0) / Math.PI;\n    const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n      atanDegrees >= 360 ? atanDegrees - 360.0 :\n        atanDegrees;\n    const hueRadians = (hue * Math.PI) / 180.0;\n\n    const ac = p2 * viewingConditions.nbb;\n    const j = 100.0 *\n      Math.pow(\n        ac / viewingConditions.aw,\n        viewingConditions.c * viewingConditions.z);\n    const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n      (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n    const huePrime = hue < 20.14 ? hue + 360 : hue;\n    const eHue = 0.25 * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);\n    const p1 =\n      (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);\n    const alpha = Math.pow(t, 0.9) *\n      Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const c = alpha * Math.sqrt(j / 100.0);\n    const m = c * viewingConditions.fLRoot;\n    const s = 50.0 *\n      Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n\n    return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   */\n  static fromJch(j: number, c: number, h: number): Cam16 {\n    return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromJchInViewingConditions(\n    j: number, c: number, h: number,\n    viewingConditions: ViewingConditions): Cam16 {\n    const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n      (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n    const m = c * viewingConditions.fLRoot;\n    const alpha = c / Math.sqrt(j / 100.0);\n    const s = 50.0 *\n      Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const hueRadians = (h * Math.PI) / 180.0;\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   */\n  static fromUcs(jstar: number, astar: number, bstar: number): Cam16 {\n    return Cam16.fromUcsInViewingConditions(\n      jstar, astar, bstar, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromUcsInViewingConditions(\n    jstar: number, astar: number, bstar: number,\n    viewingConditions: ViewingConditions): Cam16 {\n    const a = astar;\n    const b = bstar;\n    const m = Math.sqrt(a * a + b * b);\n    const M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n    const c = M / viewingConditions.fLRoot;\n    let h = Math.atan2(b, a) * (180.0 / Math.PI);\n    if (h < 0.0) {\n      h += 360.0;\n    }\n    const j = jstar / (1 - (jstar - 100) * 0.007);\n    return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n  }\n\n  /**\n   *  @return ARGB representation of color, assuming the color was viewed in\n   *     default viewing conditions, which are near-identical to the default\n   *     viewing conditions for sRGB.\n   */\n  toInt(): number {\n    return this.viewed(ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param viewingConditions Information about the environment where the color\n   *     will be viewed.\n   * @return ARGB representation of color\n   */\n  viewed(viewingConditions: ViewingConditions): number {\n    const alpha = this.chroma === 0.0 || this.j === 0.0 ?\n      0.0 :\n      this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n      alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n      1.0 / 0.9);\n    const hRad = (this.hue * Math.PI) / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac = viewingConditions.aw *\n      Math.pow(\n        this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n      eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const p2 = ac / viewingConditions.nbb;\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma = (23.0 * (p2 + 0.305) * t) /\n      (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n      Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n      Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n      Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    const argb = utils.argbFromXyz(x, y, z);\n    return argb;\n  }\n\n  /// Given color expressed in XYZ and viewed in [viewingConditions], convert to\n  /// CAM16.\n  static fromXyzInViewingConditions(\n    x: number, y: number, z: number,\n    viewingConditions: ViewingConditions): Cam16 {\n    // Transform XYZ to 'cone'/'rgb' responses\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    // Discount illuminant\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    // chromatic adaptation\n    const rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n    const gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n    const bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n    const rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n    const gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n    const bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n\n    // auxiliary components\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n\n    // hue\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = atan2 * 180.0 / Math.PI;\n    const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n      atanDegrees >= 360 ? atanDegrees - 360 :\n        atanDegrees;\n    const hueRadians = hue * Math.PI / 180.0;\n\n    // achromatic response to color\n    const ac = p2 * viewingConditions.nbb;\n\n    // CAM16 lightness and brightness\n    const J = 100.0 *\n      Math.pow(\n        ac / viewingConditions.aw,\n        viewingConditions.c * viewingConditions.z);\n    const Q = (4.0 / viewingConditions.c) * Math.sqrt(J / 100.0) *\n      (viewingConditions.aw + 4.0) * (viewingConditions.fLRoot);\n\n    const huePrime = (hue < 20.14) ? hue + 360 : hue;\n    const eHue =\n      (1.0 / 4.0) * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n    const p1 =\n      50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n    const alpha = Math.pow(t, 0.9) *\n      Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    // CAM16 chroma, colorfulness, chroma\n    const C = alpha * Math.sqrt(J / 100.0);\n    const M = C * viewingConditions.fLRoot;\n    const s = 50.0 *\n      Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n\n    // CAM16-UCS components\n    const jstar = (1.0 + 100.0 * 0.007) * J / (1.0 + 0.007 * J);\n    const mstar = Math.log(1.0 + 0.0228 * M) / 0.0228;\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new Cam16(hue, C, J, Q, M, s, jstar, astar, bstar);\n  }\n\n  /// XYZ representation of CAM16 seen in [viewingConditions].\n  xyzInViewingConditions(viewingConditions: ViewingConditions): number[] {\n    const alpha = (this.chroma === 0.0 || this.j === 0.0) ?\n      0.0 :\n      this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n      alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n      1.0 / 0.9);\n    const hRad = this.hue * Math.PI / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac = viewingConditions.aw *\n      Math.pow(\n        this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n      eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n\n    const p2 = (ac / viewingConditions.nbb);\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma = 23.0 * (p2 + 0.305) * t /\n      (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n      Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n      Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n      Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    return [x, y, z];\n  }\n}\n// --- END FILE: hct/cam16.ts ---\n\n\n// --- BEGIN FILE: hct/hct.ts ---\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\n\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport class Hct {\n  /**\n   * @param hue 0 <= hue < 360; invalid values are corrected.\n   * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n   *     returned may be lower than the requested chroma. Chroma has a different\n   *     maximum for any given hue and tone.\n   * @param tone 0 <= tone <= 100; invalid values are corrected.\n   * @return HCT representation of a color in default viewing conditions.\n   */\n\n  internalHue: number;\n  internalChroma: number;\n  internalTone: number;\n\n  static from(hue: number, chroma: number, tone: number) {\n    return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return HCT representation of a color in default viewing conditions\n   */\n  static fromInt(argb: number) {\n    return new Hct(argb);\n  }\n\n  toInt(): number {\n    return this.argb;\n  }\n\n  /**\n   * A number, in degrees, representing ex. red, orange, yellow, etc.\n   * Ranges from 0 <= hue < 360.\n   */\n  get hue(): number {\n    return this.internalHue;\n  }\n\n  /**\n   * @param newHue 0 <= newHue < 360; invalid values are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set hue(newHue: number) {\n    this.setInternalState(\n      HctSolver.solveToInt(\n        newHue,\n        this.internalChroma,\n        this.internalTone,\n      ),\n    );\n  }\n\n  get chroma(): number {\n    return this.internalChroma;\n  }\n\n  /**\n   * @param newChroma 0 <= newChroma < ?\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set chroma(newChroma: number) {\n    this.setInternalState(\n      HctSolver.solveToInt(\n        this.internalHue,\n        newChroma,\n        this.internalTone,\n      ),\n    );\n  }\n\n  /** Lightness. Ranges from 0 to 100. */\n  get tone(): number {\n    return this.internalTone;\n  }\n\n  /**\n   * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set tone(newTone: number) {\n    this.setInternalState(\n      HctSolver.solveToInt(\n        this.internalHue,\n        this.internalChroma,\n        newTone,\n      ),\n    );\n  }\n\n  private constructor(private argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n\n  private setInternalState(argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n\n  /**\n   * Translates a color into different [ViewingConditions].\n   *\n   * Colors change appearance. They look different with lights on versus off,\n   * the same color, as in hex code, on white looks different when on black.\n   * This is called color relativity, most famously explicated by Josef Albers\n   * in Interaction of Color.\n   *\n   * In color science, color appearance models can account for this and\n   * calculate the appearance of a color in different settings. HCT is based on\n   * CAM16, a color appearance model, and uses it to make these calculations.\n   *\n   * See [ViewingConditions.make] for parameters affecting color appearance.\n   */\n  inViewingConditions(vc: ViewingConditions): Hct {\n    // 1. Use CAM16 to find XYZ coordinates of color in specified VC.\n    const cam = Cam16.fromInt(this.toInt());\n    const viewedInVc = cam.xyzInViewingConditions(vc);\n\n    // 2. Create CAM16 of those XYZ coordinates in default VC.\n    const recastInVc = Cam16.fromXyzInViewingConditions(\n      viewedInVc[0],\n      viewedInVc[1],\n      viewedInVc[2],\n      ViewingConditions.make(),\n    );\n\n    // 3. Create HCT from:\n    // - CAM16 using default VC with XYZ coordinates in specified VC.\n    // - L* converted from Y in XYZ coordinates in specified VC.\n    const recastHct = Hct.from(\n      recastInVc.hue,\n      recastInVc.chroma,\n      utils.lstarFromY(viewedInVc[1]),\n    );\n    return recastHct;\n  }\n}\n// --- END FILE: hct/hct.ts ---\n\n\n// --- BEGIN FILE: hct/hct_solver.ts ---\n// This file is automatically generated. Do not modify it.\n\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nexport class HctSolver {\n  static SCALED_DISCOUNT_FROM_LINRGB = [\n    [\n      0.001200833568784504,\n      0.002389694492170889,\n      0.0002795742885861124,\n    ],\n    [\n      0.0005891086651375999,\n      0.0029785502573438758,\n      0.0003270666104008398,\n    ],\n    [\n      0.00010146692491640572,\n      0.0005364214359186694,\n      0.0032979401770712076,\n    ],\n  ];\n\n  static LINRGB_FROM_SCALED_DISCOUNT = [\n    [\n      1373.2198709594231,\n      -1100.4251190754821,\n      -7.278681089101213,\n    ],\n    [\n      -271.815969077903,\n      559.6580465940733,\n      -32.46047482791194,\n    ],\n    [\n      1.9622899599665666,\n      -57.173814538844006,\n      308.7233197812385,\n    ],\n  ];\n\n  static Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];\n\n  static CRITICAL_PLANES = [\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\n    0.10623444424209313, 0.13658714259697685, 0.16693984095186062,\n    0.19729253930674434, 0.2276452376616281, 0.2579979360165119,\n    0.28835063437139563, 0.3188300904430532, 0.350925934958123,\n    0.3848314933096426, 0.42057480301049466, 0.458183274052838,\n    0.4976837250274023, 0.5391024159806381, 0.5824650784040898,\n    0.6277969426914107, 0.6751227633498623, 0.7244668422128921,\n    0.775853049866786, 0.829304845476233, 0.8848452951698498,\n    0.942497089126609, 1.0022825574869039, 1.0642236851973577,\n    1.1283421258858297, 1.1946592148522128, 1.2631959812511864,\n    1.3339731595349034, 1.407011200216447, 1.4823302800086415,\n    1.5599503113873272, 1.6398909516233677, 1.7221716113234105,\n    1.8068114625156377, 1.8938294463134073, 1.9832442801866852,\n    2.075074464868551, 2.1693382909216234, 2.2660538449872063,\n    2.36523901573795, 2.4669114995532007, 2.5710888059345764,\n    2.6777882626779785, 2.7870270208169257, 2.898822059350997,\n    3.0131901897720907, 3.1301480604002863, 3.2497121605402226,\n    3.3718988244681087, 3.4967242352587946, 3.624204428461639,\n    3.754355295633311, 3.887192587735158, 4.022731918402185,\n    4.160988767090289, 4.301978482107941, 4.445716283538092,\n    4.592217266055746, 4.741496401646282, 4.893568542229298,\n    5.048448422192488, 5.20615066083972, 5.3666897647573375,\n    5.5300801301023865, 5.696336044816294, 5.865471690767354,\n    6.037501145825082, 6.212438385869475, 6.390297286737924,\n    6.571091626112461, 6.7548350853498045, 6.941541251256611,\n    7.131223617812143, 7.323895587840543, 7.5195704746346665,\n    7.7182615035334345, 7.919981813454504, 8.124744458384042,\n    8.332562408825165, 8.543448553206703, 8.757415699253682,\n    8.974476575321063, 9.194643831691977, 9.417930041841839,\n    9.644347703669503, 9.873909240696694, 10.106627003236781,\n    10.342513269534024, 10.58158024687427, 10.8238400726681,\n    11.069304815507364, 11.317986476196008, 11.569896988756009,\n    11.825048221409341, 12.083451977536606, 12.345119996613247,\n    12.610063955123938, 12.878295467455942, 13.149826086772048,\n    13.42466730586372, 13.702830557985108, 13.984327217668513,\n    14.269168601521828, 14.55736596900856, 14.848930523210871,\n    15.143873411576273, 15.44220572664832, 15.743938506781891,\n    16.04908273684337, 16.35764934889634, 16.66964922287304,\n    16.985093187232053, 17.30399201960269, 17.62635644741625,\n    17.95219714852476, 18.281524751807332, 18.614349837764564,\n    18.95068293910138, 19.290534541298456, 19.633915083172692,\n    19.98083495742689, 20.331304511189067, 20.685334046541502,\n    21.042933821039977, 21.404114048223256, 21.76888489811322,\n    22.137256497705877, 22.50923893145328, 22.884842241736916,\n    23.264076429332462, 23.6469514538663, 24.033477234264016,\n    24.42366364919083, 24.817520537484558, 25.21505769858089,\n    25.61628489293138, 26.021211842414342, 26.429848230738664,\n    26.842203703840827, 27.258287870275353, 27.678110301598522,\n    28.10168053274597, 28.529008062403893, 28.96010235337422,\n    29.39497283293396, 29.83362889318845, 30.276079891419332,\n    30.722335150426627, 31.172403958865512, 31.62629557157785,\n    32.08401920991837, 32.54558406207592, 33.010999283389665,\n    33.4802739966603, 33.953417292456834, 34.430438229418264,\n    34.911345834551085, 35.39614910352207, 35.88485700094671,\n    36.37747846067349, 36.87402238606382, 37.37449765026789,\n    37.87891309649659, 38.38727753828926, 38.89959975977785,\n    39.41588851594697, 39.93615253289054, 40.460400508064545,\n    40.98864111053629, 41.520882981230194, 42.05713473317016,\n    42.597404951718396, 43.141702194811224, 43.6900349931913,\n    44.24241185063697, 44.798841244188324, 45.35933162437017,\n    45.92389141541209, 46.49252901546552, 47.065252796817916,\n    47.64207110610409, 48.22299226451468, 48.808024568002054,\n    49.3971762874833, 49.9904556690408, 50.587870934119984,\n    51.189430279724725, 51.79514187861014, 52.40501387947288,\n    53.0190544071392, 53.637271562750364, 54.259673423945976,\n    54.88626804504493, 55.517063457223934, 56.15206766869424,\n    56.79128866487574, 57.43473440856916, 58.08241284012621,\n    58.734331877617365, 59.39049941699807, 60.05092333227251,\n    60.715611475655585, 61.38457167773311, 62.057811747619894,\n    62.7353394731159, 63.417162620860914, 64.10328893648692,\n    64.79372614476921, 65.48848194977529, 66.18756403501224,\n    66.89098006357258, 67.59873767827808, 68.31084450182222,\n    69.02730813691093, 69.74813616640164, 70.47333615344107,\n    71.20291564160104, 71.93688215501312, 72.67524319850172,\n    73.41800625771542, 74.16517879925733, 74.9167682708136,\n    75.67278210128072, 76.43322770089146, 77.1981124613393,\n    77.96744375590167, 78.74122893956174, 79.51947534912904,\n    80.30219030335869, 81.08938110306934, 81.88105503125999,\n    82.67721935322541, 83.4778813166706, 84.28304815182372,\n    85.09272707154808, 85.90692527145302, 86.72564993000343,\n    87.54890820862819, 88.3767072518277, 89.2090541872801,\n    90.04595612594655, 90.88742016217518, 91.73345337380438,\n    92.58406282226491, 93.43925555268066, 94.29903859396902,\n    95.16341895893969, 96.03240364439274, 96.9059996312159,\n    97.78421388448044, 98.6670533535366, 99.55452497210776,\n  ];\n\n  /**\n   * Sanitizes a small enough angle in radians.\n   *\n   * @param angle An angle in radians; must not deviate too much\n   * from 0.\n   * @return A coterminal angle between 0 and 2pi.\n   */\n  private static sanitizeRadians(angle: number): number {\n    return (angle + Math.PI * 8) % (Math.PI * 2);\n  }\n\n  /**\n   * Delinearizes an RGB component, returning a floating-point\n   * number.\n   *\n   * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n   * linear R/G/B channel\n   * @return 0.0 <= output <= 255.0, color channel converted to\n   * regular RGB space\n   */\n  private static trueDelinearized(rgbComponent: number): number {\n    const normalized = rgbComponent / 100.0;\n    let delinearized = 0.0;\n    if (normalized <= 0.0031308) {\n      delinearized = normalized * 12.92;\n    } else {\n      delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n    }\n    return delinearized * 255.0;\n  }\n\n  private static chromaticAdaptation(component: number): number {\n    const af = Math.pow(Math.abs(component), 0.42);\n    return math.signum(component) * 400.0 * af / (af + 27.13);\n  }\n\n  /**\n   * Returns the hue of a linear RGB color in CAM16.\n   *\n   * @param linrgb The linear RGB coordinates of a color.\n   * @return The hue of the color in CAM16, in radians.\n   */\n  private static hueOf(linrgb: number[]): number {\n    const scaledDiscount =\n      math.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\n    const rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n    const gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n    const bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    return Math.atan2(b, a);\n  }\n\n  private static areInCyclicOrder(a: number, b: number, c: number): boolean {\n    const deltaAB = HctSolver.sanitizeRadians(b - a);\n    const deltaAC = HctSolver.sanitizeRadians(c - a);\n    return deltaAB < deltaAC;\n  }\n\n  /**\n   * Solves the lerp equation.\n   *\n   * @param source The starting number.\n   * @param mid The number in the middle.\n   * @param target The ending number.\n   * @return A number t such that lerp(source, target, t) = mid.\n   */\n  private static intercept(source: number, mid: number, target: number):\n    number {\n    return (mid - source) / (target - source);\n  }\n\n  private static lerpPoint(source: number[], t: number, target: number[]):\n    number[] {\n    return [\n      source[0] + (target[0] - source[0]) * t,\n      source[1] + (target[1] - source[1]) * t,\n      source[2] + (target[2] - source[2]) * t,\n    ];\n  }\n\n  /**\n   * Intersects a segment with a plane.\n   *\n   * @param source The coordinates of point A.\n   * @param coordinate The R-, G-, or B-coordinate of the plane.\n   * @param target The coordinates of point B.\n   * @param axis The axis the plane is perpendicular with. (0: R, 1:\n   * G, 2: B)\n   * @return The intersection point of the segment AB with the plane\n   * R=coordinate, G=coordinate, or B=coordinate\n   */\n  private static setCoordinate(\n    source: number[],\n    coordinate: number,\n    target: number[],\n    axis: number,\n  ): number[] {\n    const t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n    return HctSolver.lerpPoint(source, t, target);\n  }\n\n  private static isBounded(x: number): boolean {\n    return 0.0 <= x && x <= 100.0;\n  }\n\n  /**\n   * Returns the nth possible vertex of the polygonal intersection.\n   *\n   * @param y The Y value of the plane.\n   * @param n The zero-based index of the point. 0 <= n <= 11.\n   * @return The nth possible vertex of the polygonal intersection\n   * of the y plane and the RGB cube, in linear RGB coordinates, if\n   * it exists. If this possible vertex lies outside of the cube,\n   * [-1.0, -1.0, -1.0] is returned.\n   */\n  private static nthVertex(y: number, n: number): number[] {\n    const kR = HctSolver.Y_FROM_LINRGB[0];\n    const kG = HctSolver.Y_FROM_LINRGB[1];\n    const kB = HctSolver.Y_FROM_LINRGB[2];\n    const coordA = n % 4 <= 1 ? 0.0 : 100.0;\n    const coordB = n % 2 === 0 ? 0.0 : 100.0;\n    if (n < 4) {\n      const g = coordA;\n      const b = coordB;\n      const r = (y - g * kG - b * kB) / kR;\n      if (HctSolver.isBounded(r)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else if (n < 8) {\n      const b = coordA;\n      const r = coordB;\n      const g = (y - r * kR - b * kB) / kG;\n      if (HctSolver.isBounded(g)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else {\n      const r = coordA;\n      const g = coordB;\n      const b = (y - r * kR - g * kG) / kB;\n      if (HctSolver.isBounded(b)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    }\n  }\n\n  /**\n   * Finds the segment containing the desired color.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return A list of two sets of linear RGB coordinates, each\n   * corresponding to an endpoint of the segment containing the\n   * desired color.\n   */\n  private static bisectToSegment(y: number, targetHue: number): number[][] {\n    let left = [-1.0, -1.0, -1.0];\n    let right = left;\n    let leftHue = 0.0;\n    let rightHue = 0.0;\n    let initialized = false;\n    let uncut = true;\n    for (let n = 0; n < 12; n++) {\n      const mid = HctSolver.nthVertex(y, n);\n      if (mid[0] < 0) {\n        continue;\n      }\n      const midHue = HctSolver.hueOf(mid);\n      if (!initialized) {\n        left = mid;\n        right = mid;\n        leftHue = midHue;\n        rightHue = midHue;\n        initialized = true;\n        continue;\n      }\n      if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n        uncut = false;\n        if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n          right = mid;\n          rightHue = midHue;\n        } else {\n          left = mid;\n          leftHue = midHue;\n        }\n      }\n    }\n    return [left, right];\n  }\n\n  private static midpoint(a: number[], b: number[]): number[] {\n    return [\n      (a[0] + b[0]) / 2,\n      (a[1] + b[1]) / 2,\n      (a[2] + b[2]) / 2,\n    ];\n  }\n\n  private static criticalPlaneBelow(x: number): number {\n    return Math.floor(x - 0.5);\n  }\n\n  private static criticalPlaneAbove(x: number): number {\n    return Math.ceil(x - 0.5);\n  }\n\n  /**\n   * Finds a color with the given Y and hue on the boundary of the\n   * cube.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return The desired color, in linear RGB coordinates.\n   */\n  private static bisectToLimit(y: number, targetHue: number): number[] {\n    const segment = HctSolver.bisectToSegment(y, targetHue);\n    let left = segment[0];\n    let leftHue = HctSolver.hueOf(left);\n    let right = segment[1];\n    for (let axis = 0; axis < 3; axis++) {\n      if (left[axis] !== right[axis]) {\n        let lPlane = -1;\n        let rPlane = 255;\n        if (left[axis] < right[axis]) {\n          lPlane = HctSolver.criticalPlaneBelow(\n            HctSolver.trueDelinearized(left[axis]));\n          rPlane = HctSolver.criticalPlaneAbove(\n            HctSolver.trueDelinearized(right[axis]));\n        } else {\n          lPlane = HctSolver.criticalPlaneAbove(\n            HctSolver.trueDelinearized(left[axis]));\n          rPlane = HctSolver.criticalPlaneBelow(\n            HctSolver.trueDelinearized(right[axis]));\n        }\n        for (let i = 0; i < 8; i++) {\n          if (Math.abs(rPlane - lPlane) <= 1) {\n            break;\n          } else {\n            const mPlane = Math.floor((lPlane + rPlane) / 2.0);\n            const midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n            const mid =\n              HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n            const midHue = HctSolver.hueOf(mid);\n            if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n              right = mid;\n              rPlane = mPlane;\n            } else {\n              left = mid;\n              leftHue = midHue;\n              lPlane = mPlane;\n            }\n          }\n        }\n      }\n    }\n    return HctSolver.midpoint(left, right);\n  }\n\n  private static inverseChromaticAdaptation(adapted: number): number {\n    const adaptedAbs = Math.abs(adapted);\n    const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n    return math.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n  }\n\n  /**\n   * Finds a color with the given hue, chroma, and Y.\n   *\n   * @param hueRadians The desired hue in radians.\n   * @param chroma The desired chroma.\n   * @param y The desired Y.\n   * @return The desired color as a hexadecimal integer, if found; 0\n   * otherwise.\n   */\n  private static findResultByJ(hueRadians: number, chroma: number, y: number):\n    number {\n    // Initial estimate of j.\n    let j = Math.sqrt(y) * 11.0;\n    // ===========================================================\n    // Operations inlined from Cam16 to avoid repeated calculation\n    // ===========================================================\n    const viewingConditions = ViewingConditions.DEFAULT;\n    const tInnerCoeff =\n      1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n    const p1 =\n      eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const hSin = Math.sin(hueRadians);\n    const hCos = Math.cos(hueRadians);\n    for (let iterationRound = 0; iterationRound < 5; iterationRound++) {\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      const jNormalized = j / 100.0;\n      const alpha =\n        chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n      const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n      const ac = viewingConditions.aw *\n        Math.pow(\n          jNormalized,\n          1.0 / viewingConditions.c / viewingConditions.z,\n        );\n      const p2 = ac / viewingConditions.nbb;\n      const gamma = 23.0 * (p2 + 0.305) * t /\n        (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n      const a = gamma * hCos;\n      const b = gamma * hSin;\n      const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      const rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n      const gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n      const bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n      const linrgb = math.matrixMultiply(\n        [rCScaled, gCScaled, bCScaled],\n        HctSolver.LINRGB_FROM_SCALED_DISCOUNT,\n      );\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n        return 0;\n      }\n      const kR = HctSolver.Y_FROM_LINRGB[0];\n      const kG = HctSolver.Y_FROM_LINRGB[1];\n      const kB = HctSolver.Y_FROM_LINRGB[2];\n      const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n      if (fnj <= 0) {\n        return 0;\n      }\n      if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n        if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n          return 0;\n        }\n        return utils.argbFromLinrgb(linrgb);\n      }\n      // Iterates with Newton method,\n      // Using 2 * fn(j) / j as the approximation of fn'(j)\n      j = j - (fnj - y) * j / (2 * fnj);\n    }\n    return 0;\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return A hexadecimal representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToInt(hueDegrees: number, chroma: number, lstar: number): number {\n    if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n      return utils.argbFromLstar(lstar);\n    }\n    hueDegrees = math.sanitizeDegreesDouble(hueDegrees);\n    const hueRadians = hueDegrees / 180 * Math.PI;\n    const y = utils.yFromLstar(lstar);\n    const exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n    if (exactAnswer !== 0) {\n      return exactAnswer;\n    }\n    const linrgb = HctSolver.bisectToLimit(y, hueRadians);\n    return utils.argbFromLinrgb(linrgb);\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return An CAM16 object representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToCam(hueDegrees: number, chroma: number, lstar: number): Cam16 {\n    return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n  }\n}\n// --- END FILE: hct/hct_solver.ts ---\n\n\n// --- BEGIN FILE: hct/viewing_conditions.ts ---\n/**\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n *\n * This class caches intermediate values of the CAM16 conversion process that\n * depend only on viewing conditions, enabling speed ups.\n */\nexport class ViewingConditions {\n  /** sRGB-like viewing conditions.  */\n  static DEFAULT = ViewingConditions.make();\n\n  /**\n   * Create ViewingConditions from a simple, physically relevant, set of\n   * parameters.\n   *\n   * @param whitePoint White point, measured in the XYZ color space.\n   *     default = D65, or sunny day afternoon\n   * @param adaptingLuminance The luminance of the adapting field. Informally,\n   *     how bright it is in the room where the color is viewed. Can be\n   *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n   *     or 200 lux.\n   * @param backgroundLstar The lightness of the area surrounding the color.\n   *     measured by L* in L*a*b*. default = 50.0\n   * @param surround A general description of the lighting surrounding the\n   *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n   *     dimly light room, like watching TV at home at night. 2.0 means there\n   *     is no difference between the lighting on the color and around it.\n   *     default = 2.0\n   * @param discountingIlluminant Whether the eye accounts for the tint of the\n   *     ambient lighting, such as knowing an apple is still red in green light.\n   *     default = false, the eye does not perform this process on\n   *       self-luminous objects like displays.\n   */\n  static make(\n    whitePoint = utils.whitePointD65(),\n    adaptingLuminance = (200.0 / Math.PI) * utils.yFromLstar(50.0) / 100.0,\n    backgroundLstar = 50.0, surround = 2.0,\n    discountingIlluminant = false): ViewingConditions {\n    const xyz = whitePoint;\n    const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n    const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n    const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n    const f = 0.8 + surround / 10.0;\n    const c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) :\n      math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n    let d = discountingIlluminant ?\n      1.0 :\n      f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n    d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n    const nc = f;\n    const rgbD = [\n      d * (100.0 / rW) + 1.0 - d,\n      d * (100.0 / gW) + 1.0 - d,\n      d * (100.0 / bW) + 1.0 - d,\n    ];\n    const k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n    const k4 = k * k * k * k;\n    const k4F = 1.0 - k4;\n    const fl = k4 * adaptingLuminance +\n      0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n    const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n    const z = 1.48 + Math.sqrt(n);\n    const nbb = 0.725 / Math.pow(n, 0.2);\n    const ncb = nbb;\n    const rgbAFactors = [\n      Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),\n    ];\n    const rgbA = [\n      (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),\n      (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),\n      (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),\n    ];\n    const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n    return new ViewingConditions(\n      n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\n  }\n\n  /**\n   * Parameters are intermediate values of the CAM16 conversion process. Their\n   * names are shorthand for technical color science terminology, this class\n   * would not benefit from documenting them individually. A brief overview\n   * is available in the CAM16 specification, and a complete overview requires\n   * a color science textbook, such as Fairchild's Color Appearance Models.\n   */\n  private constructor(\n    public n: number, public aw: number, public nbb: number,\n    public ncb: number, public c: number, public nc: number,\n    public rgbD: number[], public fl: number, public fLRoot: number,\n    public z: number) { }\n}\n// --- END FILE: hct/viewing_conditions.ts ---\n\n\n// --- BEGIN FILE: palettes/core_palette.ts ---\n/**\n * @deprecated Use {@link DynamicScheme} for color scheme generation.\n * Use {@link CorePalettes} for core palettes container class.\n */\nexport interface CorePaletteColors {\n  primary: number;\n  secondary?: number;\n  tertiary?: number;\n  neutral?: number;\n  neutralVariant?: number;\n  error?: number;\n}\n\n/**\n * An intermediate concept between the key color for a UI theme, and a full\n * color scheme. 5 sets of tones are generated, all except one use the same hue\n * as the key color, and all vary in chroma.\n *\n * @deprecated Use {@link DynamicScheme} for color scheme generation.\n * Use {@link CorePalettes} for core palettes container class.\n */\nexport class CorePalette {\n  a1: TonalPalette;\n  a2: TonalPalette;\n  a3: TonalPalette;\n  n1: TonalPalette;\n  n2: TonalPalette;\n  error: TonalPalette;\n\n  /**\n   * @param argb ARGB representation of a color\n   *\n   * @deprecated Use {@link DynamicScheme} for color scheme generation.\n   * Use {@link CorePalettes} for core palettes container class.\n   */\n  static of(argb: number): CorePalette {\n    return new CorePalette(argb, false);\n  }\n\n  /**\n   * @param argb ARGB representation of a color\n   *\n   * @deprecated Use {@link DynamicScheme} for color scheme generation.\n   * Use {@link CorePalettes} for core palettes container class.\n   */\n  static contentOf(argb: number): CorePalette {\n    return new CorePalette(argb, true);\n  }\n\n  /**\n   * Create a [CorePalette] from a set of colors\n   *\n   * @deprecated Use {@link DynamicScheme} for color scheme generation.\n   * Use {@link CorePalettes} for core palettes container class.\n   */\n  static fromColors(colors: CorePaletteColors): CorePalette {\n    return CorePalette.createPaletteFromColors(false, colors);\n  }\n\n  /**\n   * Create a content [CorePalette] from a set of colors\n   *\n   * @deprecated Use {@link DynamicScheme} for color scheme generation.\n   * Use {@link CorePalettes} for core palettes container class.\n   */\n  static contentFromColors(colors: CorePaletteColors): CorePalette {\n    return CorePalette.createPaletteFromColors(true, colors);\n  }\n\n  private static createPaletteFromColors(\n    content: boolean,\n    colors: CorePaletteColors,\n  ) {\n    const palette = new CorePalette(colors.primary, content);\n    if (colors.secondary) {\n      const p = new CorePalette(colors.secondary, content);\n      palette.a2 = p.a1;\n    }\n    if (colors.tertiary) {\n      const p = new CorePalette(colors.tertiary, content);\n      palette.a3 = p.a1;\n    }\n    if (colors.error) {\n      const p = new CorePalette(colors.error, content);\n      palette.error = p.a1;\n    }\n    if (colors.neutral) {\n      const p = new CorePalette(colors.neutral, content);\n      palette.n1 = p.n1;\n    }\n    if (colors.neutralVariant) {\n      const p = new CorePalette(colors.neutralVariant, content);\n      palette.n2 = p.n2;\n    }\n    return palette;\n  }\n\n  private constructor(argb: number, isContent: boolean) {\n    const hct = Hct.fromInt(argb);\n    const hue = hct.hue;\n    const chroma = hct.chroma;\n    if (isContent) {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, chroma);\n      this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, chroma / 2);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 12, 4));\n      this.n2 = TonalPalette.fromHueAndChroma(hue, Math.min(chroma / 6, 8));\n    } else {\n      this.a1 = TonalPalette.fromHueAndChroma(hue, Math.max(48, chroma));\n      this.a2 = TonalPalette.fromHueAndChroma(hue, 16);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60, 24);\n      this.n1 = TonalPalette.fromHueAndChroma(hue, 4);\n      this.n2 = TonalPalette.fromHueAndChroma(hue, 8);\n    }\n    this.error = TonalPalette.fromHueAndChroma(25, 84);\n  }\n}\n// --- END FILE: palettes/core_palette.ts ---\n\n\n// --- BEGIN FILE: palettes/core_palettes.ts ---\n/**\n * Comprises foundational palettes to build a color scheme. Generated from a\n * source color, these palettes will then be part of a [DynamicScheme] together\n * with appearance preferences.\n */\nexport class CorePalettes {\n  constructor(\n    public primary: TonalPalette, public secondary: TonalPalette,\n    public tertiary: TonalPalette, public neutral: TonalPalette,\n    public neutralVariant: TonalPalette) { }\n}\n// --- END FILE: palettes/core_palettes.ts ---\n\n\n// --- BEGIN FILE: palettes/tonal_palette.ts ---\n/**\n *  A convenience class for retrieving colors that are constant in hue and\n *  chroma, but vary in tone.\n */\nexport class TonalPalette {\n  private readonly cache = new Map<number, number>();\n\n  /**\n   * @param argb ARGB representation of a color\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromInt(argb: number): TonalPalette {\n    const hct = Hct.fromInt(argb);\n    return TonalPalette.fromHct(hct);\n  }\n\n  /**\n   * @param hct Hct\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromHct(hct: Hct) {\n    return new TonalPalette(hct.hue, hct.chroma, hct);\n  }\n\n  /**\n   * @param hue HCT hue\n   * @param chroma HCT chroma\n   * @return Tones matching hue and chroma.\n   */\n  static fromHueAndChroma(hue: number, chroma: number): TonalPalette {\n    const keyColor = new KeyColor(hue, chroma).create();\n    return new TonalPalette(hue, chroma, keyColor);\n  }\n\n  private constructor(readonly hue: number, readonly chroma: number, readonly keyColor: Hct) { }\n\n  /**\n   * @param tone HCT tone, measured from 0 to 100.\n   * @return ARGB representation of a color with that tone.\n   */\n  tone(tone: number): number {\n    let argb = this.cache.get(tone);\n    if (argb === undefined) {\n      argb = Hct.from(this.hue, this.chroma, tone).toInt();\n      this.cache.set(tone, argb);\n    }\n    return argb;\n  }\n\n  /**\n   * @param tone HCT tone.\n   * @return HCT representation of a color with that tone.\n   */\n  getHct(tone: number): Hct {\n    return Hct.fromInt(this.tone(tone));\n  }\n}\n\n/**\n * Key color is a color that represents the hue and chroma of a tonal palette\n */\nexport class KeyColor {\n  // Cache that maps tone to max chroma to avoid duplicated HCT calculation.\n  private readonly chromaCache = new Map<number, number>();\n  private readonly maxChromaValue = 200.0;\n\n  constructor(readonly hue: number, readonly requestedChroma: number) { }\n\n  /**\n   * Creates a key color from a [hue] and a [chroma].\n   * The key color is the first tone, starting from T50, matching the given hue\n   * and chroma.\n   *\n   * @return Key color [Hct]\n   */\n  create(): Hct {\n    // Pivot around T50 because T50 has the most chroma available, on\n    // average. Thus it is most likely to have a direct answer.\n    const pivotTone = 50;\n    const toneStepSize = 1;\n    // Epsilon to accept values slightly higher than the requested chroma.\n    const epsilon = 0.01;\n\n    // Binary search to find the tone that can provide a chroma that is closest\n    // to the requested chroma.\n    let lowerTone = 0;\n    let upperTone = 100;\n    while (lowerTone < upperTone) {\n      const midTone = Math.floor((lowerTone + upperTone) / 2);\n      const isAscending =\n        this.maxChroma(midTone) < this.maxChroma(midTone + toneStepSize);\n      const sufficientChroma =\n        this.maxChroma(midTone) >= this.requestedChroma - epsilon;\n\n      if (sufficientChroma) {\n        // Either range [lowerTone, midTone] or [midTone, upperTone] has\n        // the answer, so search in the range that is closer the pivot tone.\n        if (Math.abs(lowerTone - pivotTone) < Math.abs(upperTone - pivotTone)) {\n          upperTone = midTone;\n        } else {\n          if (lowerTone === midTone) {\n            return Hct.from(this.hue, this.requestedChroma, lowerTone);\n          }\n          lowerTone = midTone;\n        }\n      } else {\n        // As there is no sufficient chroma in the midTone, follow the direction\n        // to the chroma peak.\n        if (isAscending) {\n          lowerTone = midTone + toneStepSize;\n        } else {\n          // Keep midTone for potential chroma peak.\n          upperTone = midTone;\n        }\n      }\n    }\n\n    return Hct.from(this.hue, this.requestedChroma, lowerTone);\n  }\n\n  // Find the maximum chroma for a given tone\n  private maxChroma(tone: number): number {\n    if (this.chromaCache.has(tone)) {\n      return this.chromaCache.get(tone)!;\n    }\n    const chroma = Hct.from(this.hue, this.maxChromaValue, tone).chroma;\n    this.chromaCache.set(tone, chroma);\n    return chroma;\n  }\n}\n// --- END FILE: palettes/tonal_palette.ts ---\n\n\n// --- BEGIN FILE: quantize/lab_point_provider.ts ---\n/**\n * Provides conversions needed for K-Means quantization. Converting input to\n * points, and converting the final state of the K-Means algorithm to colors.\n */\nexport class LabPointProvider implements PointProvider {\n  /**\n   * Convert a color represented in ARGB to a 3-element array of L*a*b*\n   * coordinates of the color.\n   */\n  fromInt(argb: number): number[] {\n    return utils.labFromArgb(argb);\n  }\n\n  /**\n   * Convert a 3-element array to a color represented in ARGB.\n   */\n  toInt(point: number[]): number {\n    return utils.argbFromLab(point[0], point[1], point[2]);\n  }\n\n  /**\n   * Standard CIE 1976 delta E formula also takes the square root, unneeded\n   * here. This method is used by quantization algorithms to compare distance,\n   * and the relative ordering is the same, with or without a square root.\n   *\n   * This relatively minor optimization is helpful because this method is\n   * called at least once for each pixel in an image.\n   */\n  distance(from: number[], to: number[]): number {\n    const dL = from[0] - to[0];\n    const dA = from[1] - to[1];\n    const dB = from[2] - to[2];\n    return dL * dL + dA * dA + dB * dB;\n  }\n}\n// --- END FILE: quantize/lab_point_provider.ts ---\n\n\n// --- BEGIN FILE: quantize/point_provider.ts ---\n/**\n * An interface to allow use of different color spaces by\n * quantizers.\n */\n\ndeclare interface PointProvider {\n  toInt(point: number[]): number;\n  fromInt(argb: number): number[];\n  distance(from: number[], to: number[]): number;\n}\n// --- END FILE: quantize/point_provider.ts ---\n\n\n// --- BEGIN FILE: quantize/quantizer_celebi.ts ---\n/**\n * An image quantizer that improves on the quality of a standard K-Means\n * algorithm by setting the K-Means initial state to the output of a Wu\n * quantizer, instead of random centroids. Improves on speed by several\n * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means\n * with those optimizations.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerCelebi {\n  /**\n   * @param pixels Colors in ARGB format.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Map with keys of colors in ARGB format, and values of number of\n   *     pixels in the original image that correspond to the color in the\n   *     quantized image.\n   */\n  static quantize(pixels: number[], maxColors: number): Map<number, number> {\n    const wu = new QuantizerWu();\n    const wuResult = wu.quantize(pixels, maxColors);\n    return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);\n  }\n}\n// --- END FILE: quantize/quantizer_celebi.ts ---\n\n\n// --- BEGIN FILE: quantize/quantizer_map.ts ---\n/**\n * Quantizes an image into a map, with keys of ARGB colors, and values of the\n * number of times that color appears in the image.\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerMap {\n  /**\n   * @param pixels Colors in ARGB format.\n   * @return A Map with keys of ARGB colors, and values of the number of times\n   *     the color appears in the image.\n   */\n  static quantize(pixels: number[]): Map<number, number> {\n    const countByColor = new Map<number, number>();\n    for (let i = 0; i < pixels.length; i++) {\n      const pixel = pixels[i];\n      const alpha = utils.alphaFromArgb(pixel);\n      if (alpha < 255) {\n        continue;\n      }\n      countByColor.set(pixel, (countByColor.get(pixel) ?? 0) + 1);\n    }\n    return countByColor;\n  }\n}\n// --- END FILE: quantize/quantizer_map.ts ---\n\n\n// --- BEGIN FILE: quantize/quantizer_wsmeans.ts ---\nconst MAX_ITERATIONS = 10;\nconst MIN_MOVEMENT_DISTANCE = 3.0;\n\n/**\n * An image quantizer that improves on the speed of a standard K-Means algorithm\n * by implementing several optimizations, including deduping identical pixels\n * and a triangle inequality rule that reduces the number of comparisons needed\n * to identify which cluster a point should be moved to.\n *\n * Wsmeans stands for Weighted Square Means.\n *\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\n * paper, Improving the Performance of K-Means for Color Quantization.\n * https://arxiv.org/abs/1101.0395\n */\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable-next-line:class-as-namespace\nexport class QuantizerWsmeans {\n  /**\n   * @param inputPixels Colors in ARGB format.\n   * @param startingClusters Defines the initial state of the quantizer. Passing\n   *     an empty array is fine, the implementation will create its own initial\n   *     state that leads to reproducible results for the same inputs.\n   *     Passing an array that is the result of Wu quantization leads to higher\n   *     quality results.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Colors in ARGB format.\n   */\n  static quantize(\n    inputPixels: number[], startingClusters: number[],\n    maxColors: number): Map<number, number> {\n    const pixelToCount = new Map<number, number>();\n    const points = new Array<number[]>();\n    const pixels = new Array<number>();\n    const pointProvider = new LabPointProvider();\n    let pointCount = 0;\n    for (let i = 0; i < inputPixels.length; i++) {\n      const inputPixel = inputPixels[i];\n      const pixelCount = pixelToCount.get(inputPixel);\n      if (pixelCount === undefined) {\n        pointCount++;\n        points.push(pointProvider.fromInt(inputPixel));\n        pixels.push(inputPixel);\n        pixelToCount.set(inputPixel, 1);\n      } else {\n        pixelToCount.set(inputPixel, pixelCount + 1);\n      }\n    }\n\n    const counts = new Array<number>();\n    for (let i = 0; i < pointCount; i++) {\n      const pixel = pixels[i];\n      const count = pixelToCount.get(pixel);\n      if (count !== undefined) {\n        counts[i] = count;\n      }\n    }\n\n    let clusterCount = Math.min(maxColors, pointCount);\n    if (startingClusters.length > 0) {\n      clusterCount = Math.min(clusterCount, startingClusters.length);\n    }\n\n    const clusters = new Array<number[]>();\n    for (let i = 0; i < startingClusters.length; i++) {\n      clusters.push(pointProvider.fromInt(startingClusters[i]));\n    }\n    const additionalClustersNeeded = clusterCount - clusters.length;\n    if (startingClusters.length === 0 && additionalClustersNeeded > 0) {\n      for (let i = 0; i < additionalClustersNeeded; i++) {\n        const l = Math.random() * 100.0;\n        const a = Math.random() * (100.0 - (-100.0) + 1) + -100;\n        const b = Math.random() * (100.0 - (-100.0) + 1) + -100;\n\n        clusters.push(new Array(l, a, b));\n      }\n    }\n\n    const clusterIndices = new Array<number>();\n    for (let i = 0; i < pointCount; i++) {\n      clusterIndices.push(Math.floor(Math.random() * clusterCount));\n    }\n\n    const indexMatrix = new Array<number[]>();\n    for (let i = 0; i < clusterCount; i++) {\n      indexMatrix.push(new Array<number>());\n      for (let j = 0; j < clusterCount; j++) {\n        indexMatrix[i].push(0);\n      }\n    }\n\n    const distanceToIndexMatrix = new Array<DistanceAndIndex[]>();\n    for (let i = 0; i < clusterCount; i++) {\n      distanceToIndexMatrix.push(new Array<DistanceAndIndex>());\n      for (let j = 0; j < clusterCount; j++) {\n        distanceToIndexMatrix[i].push(new DistanceAndIndex());\n      }\n    }\n\n\n    const pixelCountSums = new Array<number>();\n    for (let i = 0; i < clusterCount; i++) {\n      pixelCountSums.push(0);\n    }\n    for (let iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n      for (let i = 0; i < clusterCount; i++) {\n        for (let j = i + 1; j < clusterCount; j++) {\n          const distance = pointProvider.distance(clusters[i], clusters[j]);\n          distanceToIndexMatrix[j][i].distance = distance;\n          distanceToIndexMatrix[j][i].index = i;\n          distanceToIndexMatrix[i][j].distance = distance;\n          distanceToIndexMatrix[i][j].index = j;\n        }\n        distanceToIndexMatrix[i].sort();\n        for (let j = 0; j < clusterCount; j++) {\n          indexMatrix[i][j] = distanceToIndexMatrix[i][j].index;\n        }\n      }\n\n      let pointsMoved = 0;\n      for (let i = 0; i < pointCount; i++) {\n        const point = points[i];\n        const previousClusterIndex = clusterIndices[i];\n        const previousCluster = clusters[previousClusterIndex];\n        const previousDistance = pointProvider.distance(point, previousCluster);\n        let minimumDistance = previousDistance;\n        let newClusterIndex = -1;\n        for (let j = 0; j < clusterCount; j++) {\n          if (distanceToIndexMatrix[previousClusterIndex][j].distance >=\n            4 * previousDistance) {\n            continue;\n          }\n          const distance = pointProvider.distance(point, clusters[j]);\n          if (distance < minimumDistance) {\n            minimumDistance = distance;\n            newClusterIndex = j;\n          }\n        }\n        if (newClusterIndex !== -1) {\n          const distanceChange = Math.abs(\n            (Math.sqrt(minimumDistance) - Math.sqrt(previousDistance)));\n          if (distanceChange > MIN_MOVEMENT_DISTANCE) {\n            pointsMoved++;\n            clusterIndices[i] = newClusterIndex;\n          }\n        }\n      }\n\n      if (pointsMoved === 0 && iteration !== 0) {\n        break;\n      }\n\n      const componentASums = new Array<number>(clusterCount).fill(0);\n      const componentBSums = new Array<number>(clusterCount).fill(0);\n      const componentCSums = new Array<number>(clusterCount).fill(0);\n\n      for (let i = 0; i < clusterCount; i++) {\n        pixelCountSums[i] = 0;\n      }\n      for (let i = 0; i < pointCount; i++) {\n        const clusterIndex = clusterIndices[i];\n        const point = points[i];\n        const count = counts[i];\n        pixelCountSums[clusterIndex] += count;\n        componentASums[clusterIndex] += (point[0] * count);\n        componentBSums[clusterIndex] += (point[1] * count);\n        componentCSums[clusterIndex] += (point[2] * count);\n      }\n\n      for (let i = 0; i < clusterCount; i++) {\n        const count = pixelCountSums[i];\n        if (count === 0) {\n          clusters[i] = [0.0, 0.0, 0.0];\n          continue;\n        }\n        const a = componentASums[i] / count;\n        const b = componentBSums[i] / count;\n        const c = componentCSums[i] / count;\n        clusters[i] = [a, b, c];\n      }\n    }\n\n    const argbToPopulation = new Map<number, number>();\n    for (let i = 0; i < clusterCount; i++) {\n      const count = pixelCountSums[i];\n      if (count === 0) {\n        continue;\n      }\n\n      const possibleNewCluster = pointProvider.toInt(clusters[i]);\n      if (argbToPopulation.has(possibleNewCluster)) {\n        continue;\n      }\n\n      argbToPopulation.set(possibleNewCluster, count);\n    }\n    return argbToPopulation;\n  }\n}\n\n/**\n *  A wrapper for maintaining a table of distances between K-Means clusters.\n */\nexport class DistanceAndIndex {\n  distance: number = -1;\n  index: number = -1;\n}\n// --- END FILE: quantize/quantizer_wsmeans.ts ---\n\n\n// --- BEGIN FILE: quantize/quantizer_wu.ts ---\nconst INDEX_BITS = 5;\nconst SIDE_LENGTH = 33;    // ((1 << INDEX_INDEX_BITS) + 1)\nconst TOTAL_SIZE = 35937;  // SIDE_LENGTH * SIDE_LENGTH * SIDE_LENGTH\n\nconst directions = {\n  RED: 'red',\n  GREEN: 'green',\n  BLUE: 'blue',\n};\n\n/**\n * An image quantizer that divides the image's pixels into clusters by\n * recursively cutting an RGB cube, based on the weight of pixels in each area\n * of the cube.\n *\n * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in\n * 1991.\n */\nexport class QuantizerWu {\n  constructor(\n    private weights: number[] = [], private momentsR: number[] = [],\n    private momentsG: number[] = [], private momentsB: number[] = [],\n    private moments: number[] = [], private cubes: Box[] = []) { }\n\n  /**\n   * @param pixels Colors in ARGB format.\n   * @param maxColors The number of colors to divide the image into. A lower\n   *     number of colors may be returned.\n   * @return Colors in ARGB format.\n   */\n  quantize(pixels: number[], maxColors: number): number[] {\n    this.constructHistogram(pixels);\n    this.computeMoments();\n    const createBoxesResult = this.createBoxes(maxColors);\n    const results = this.createResult(createBoxesResult.resultCount);\n    return results;\n  }\n\n  private constructHistogram(pixels: number[]) {\n    this.weights = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n    this.momentsR = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n    this.momentsG = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n    this.momentsB = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n    this.moments = Array.from<number>({ length: TOTAL_SIZE }).fill(0);\n\n    const countByColor = QuantizerMap.quantize(pixels);\n\n    for (const [pixel, count] of countByColor.entries()) {\n      const red = utils.redFromArgb(pixel);\n      const green = utils.greenFromArgb(pixel);\n      const blue = utils.blueFromArgb(pixel);\n\n      const bitsToRemove = 8 - INDEX_BITS;\n      const iR = (red >> bitsToRemove) + 1;\n      const iG = (green >> bitsToRemove) + 1;\n      const iB = (blue >> bitsToRemove) + 1;\n      const index = this.getIndex(iR, iG, iB);\n\n      this.weights[index] = (this.weights[index] ?? 0) + count;\n      this.momentsR[index] += count * red;\n      this.momentsG[index] += count * green;\n      this.momentsB[index] += count * blue;\n      this.moments[index] += count * (red * red + green * green + blue * blue);\n    }\n  }\n\n  private computeMoments() {\n    for (let r = 1; r < SIDE_LENGTH; r++) {\n      const area = Array.from<number>({ length: SIDE_LENGTH }).fill(0);\n      const areaR = Array.from<number>({ length: SIDE_LENGTH }).fill(0);\n      const areaG = Array.from<number>({ length: SIDE_LENGTH }).fill(0);\n      const areaB = Array.from<number>({ length: SIDE_LENGTH }).fill(0);\n      const area2 = Array.from<number>({ length: SIDE_LENGTH }).fill(0.0);\n      for (let g = 1; g < SIDE_LENGTH; g++) {\n        let line = 0;\n        let lineR = 0;\n        let lineG = 0;\n        let lineB = 0;\n        let line2 = 0.0;\n        for (let b = 1; b < SIDE_LENGTH; b++) {\n          const index = this.getIndex(r, g, b);\n          line += this.weights[index];\n          lineR += this.momentsR[index];\n          lineG += this.momentsG[index];\n          lineB += this.momentsB[index];\n          line2 += this.moments[index];\n\n          area[b] += line;\n          areaR[b] += lineR;\n          areaG[b] += lineG;\n          areaB[b] += lineB;\n          area2[b] += line2;\n\n          const previousIndex = this.getIndex(r - 1, g, b);\n          this.weights[index] = this.weights[previousIndex] + area[b];\n          this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];\n          this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];\n          this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];\n          this.moments[index] = this.moments[previousIndex] + area2[b];\n        }\n      }\n    }\n  }\n\n  private createBoxes(maxColors: number): CreateBoxesResult {\n    this.cubes =\n      Array.from<number>({ length: maxColors }).fill(0).map(() => new Box());\n    const volumeVariance = Array.from<number>({ length: maxColors }).fill(0.0);\n    this.cubes[0].r0 = 0;\n    this.cubes[0].g0 = 0;\n    this.cubes[0].b0 = 0;\n\n    this.cubes[0].r1 = SIDE_LENGTH - 1;\n    this.cubes[0].g1 = SIDE_LENGTH - 1;\n    this.cubes[0].b1 = SIDE_LENGTH - 1;\n\n    let generatedColorCount = maxColors;\n    let next = 0;\n    for (let i = 1; i < maxColors; i++) {\n      if (this.cut(this.cubes[next], this.cubes[i])) {\n        volumeVariance[next] =\n          this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0.0;\n        volumeVariance[i] =\n          this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0.0;\n      } else {\n        volumeVariance[next] = 0.0;\n        i--;\n      }\n\n      next = 0;\n      let temp = volumeVariance[0];\n      for (let j = 1; j <= i; j++) {\n        if (volumeVariance[j] > temp) {\n          temp = volumeVariance[j];\n          next = j;\n        }\n      }\n      if (temp <= 0.0) {\n        generatedColorCount = i + 1;\n        break;\n      }\n    }\n    return new CreateBoxesResult(maxColors, generatedColorCount);\n  }\n\n  private createResult(colorCount: number): number[] {\n    const colors: number[] = [];\n    for (let i = 0; i < colorCount; ++i) {\n      const cube = this.cubes[i];\n      const weight = this.volume(cube, this.weights);\n      if (weight > 0) {\n        const r = Math.round(this.volume(cube, this.momentsR) / weight);\n        const g = Math.round(this.volume(cube, this.momentsG) / weight);\n        const b = Math.round(this.volume(cube, this.momentsB) / weight);\n        const color = (255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) |\n          (b & 0x0ff);\n        colors.push(color);\n      }\n    }\n    return colors;\n  }\n\n  private variance(cube: Box) {\n    const dr = this.volume(cube, this.momentsR);\n    const dg = this.volume(cube, this.momentsG);\n    const db = this.volume(cube, this.momentsB);\n    const xx = this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n      this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n      this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n      this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n      this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n      this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n      this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n      this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];\n    const hypotenuse = dr * dr + dg * dg + db * db;\n    const volume = this.volume(cube, this.weights);\n    return xx - hypotenuse / volume;\n  }\n\n  private cut(one: Box, two: Box) {\n    const wholeR = this.volume(one, this.momentsR);\n    const wholeG = this.volume(one, this.momentsG);\n    const wholeB = this.volume(one, this.momentsB);\n    const wholeW = this.volume(one, this.weights);\n\n    const maxRResult = this.maximize(\n      one, directions.RED, one.r0 + 1, one.r1, wholeR, wholeG, wholeB,\n      wholeW);\n    const maxGResult = this.maximize(\n      one, directions.GREEN, one.g0 + 1, one.g1, wholeR, wholeG, wholeB,\n      wholeW);\n    const maxBResult = this.maximize(\n      one, directions.BLUE, one.b0 + 1, one.b1, wholeR, wholeG, wholeB,\n      wholeW);\n\n    let direction;\n    const maxR = maxRResult.maximum;\n    const maxG = maxGResult.maximum;\n    const maxB = maxBResult.maximum;\n    if (maxR >= maxG && maxR >= maxB) {\n      if (maxRResult.cutLocation < 0) {\n        return false;\n      }\n      direction = directions.RED;\n    } else if (maxG >= maxR && maxG >= maxB) {\n      direction = directions.GREEN;\n    } else {\n      direction = directions.BLUE;\n    }\n\n    two.r1 = one.r1;\n    two.g1 = one.g1;\n    two.b1 = one.b1;\n\n    switch (direction) {\n      case directions.RED:\n        one.r1 = maxRResult.cutLocation;\n        two.r0 = one.r1;\n        two.g0 = one.g0;\n        two.b0 = one.b0;\n        break;\n      case directions.GREEN:\n        one.g1 = maxGResult.cutLocation;\n        two.r0 = one.r0;\n        two.g0 = one.g1;\n        two.b0 = one.b0;\n        break;\n      case directions.BLUE:\n        one.b1 = maxBResult.cutLocation;\n        two.r0 = one.r0;\n        two.g0 = one.g0;\n        two.b0 = one.b1;\n        break;\n      default:\n        throw new Error('unexpected direction ' + direction);\n    }\n\n    one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);\n    two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);\n    return true;\n  }\n\n  private maximize(\n    cube: Box, direction: string, first: number, last: number, wholeR: number,\n    wholeG: number, wholeB: number, wholeW: number) {\n    const bottomR = this.bottom(cube, direction, this.momentsR);\n    const bottomG = this.bottom(cube, direction, this.momentsG);\n    const bottomB = this.bottom(cube, direction, this.momentsB);\n    const bottomW = this.bottom(cube, direction, this.weights);\n\n    let max = 0.0;\n    let cut = -1;\n\n    let halfR = 0;\n    let halfG = 0;\n    let halfB = 0;\n    let halfW = 0;\n    for (let i = first; i < last; i++) {\n      halfR = bottomR + this.top(cube, direction, i, this.momentsR);\n      halfG = bottomG + this.top(cube, direction, i, this.momentsG);\n      halfB = bottomB + this.top(cube, direction, i, this.momentsB);\n      halfW = bottomW + this.top(cube, direction, i, this.weights);\n      if (halfW === 0) {\n        continue;\n      }\n\n      let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n      let tempDenominator = halfW * 1.0;\n      let temp = tempNumerator / tempDenominator;\n\n      halfR = wholeR - halfR;\n      halfG = wholeG - halfG;\n      halfB = wholeB - halfB;\n      halfW = wholeW - halfW;\n      if (halfW === 0) {\n        continue;\n      }\n\n      tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\n      tempDenominator = halfW * 1.0;\n      temp += tempNumerator / tempDenominator;\n\n      if (temp > max) {\n        max = temp;\n        cut = i;\n      }\n    }\n    return new MaximizeResult(cut, max);\n  }\n\n  private volume(cube: Box, moment: number[]) {\n    return (\n      moment[this.getIndex(cube.r1, cube.g1, cube.b1)] -\n      moment[this.getIndex(cube.r1, cube.g1, cube.b0)] -\n      moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n      moment[this.getIndex(cube.r1, cube.g0, cube.b0)] -\n      moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n      moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n      moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n      moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n  }\n\n  private bottom(cube: Box, direction: string, moment: number[]) {\n    switch (direction) {\n      case directions.RED:\n        return (\n          -moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\n          moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\n          moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n          moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n      case directions.GREEN:\n        return (\n          -moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\n          moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n          moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\n          moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n      case directions.BLUE:\n        return (\n          -moment[this.getIndex(cube.r1, cube.g1, cube.b0)] +\n          moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\n          moment[this.getIndex(cube.r0, cube.g1, cube.b0)] -\n          moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\n      default:\n        throw new Error('unexpected direction $direction');\n    }\n  }\n\n  private top(\n    cube: Box, direction: string, position: number, moment: number[]) {\n    switch (direction) {\n      case directions.RED:\n        return (\n          moment[this.getIndex(position, cube.g1, cube.b1)] -\n          moment[this.getIndex(position, cube.g1, cube.b0)] -\n          moment[this.getIndex(position, cube.g0, cube.b1)] +\n          moment[this.getIndex(position, cube.g0, cube.b0)]);\n      case directions.GREEN:\n        return (\n          moment[this.getIndex(cube.r1, position, cube.b1)] -\n          moment[this.getIndex(cube.r1, position, cube.b0)] -\n          moment[this.getIndex(cube.r0, position, cube.b1)] +\n          moment[this.getIndex(cube.r0, position, cube.b0)]);\n      case directions.BLUE:\n        return (\n          moment[this.getIndex(cube.r1, cube.g1, position)] -\n          moment[this.getIndex(cube.r1, cube.g0, position)] -\n          moment[this.getIndex(cube.r0, cube.g1, position)] +\n          moment[this.getIndex(cube.r0, cube.g0, position)]);\n      default:\n        throw new Error('unexpected direction $direction');\n    }\n  }\n\n  private getIndex(r: number, g: number, b: number): number {\n    return (r << (INDEX_BITS * 2)) + (r << (INDEX_BITS + 1)) + r +\n      (g << INDEX_BITS) + g + b;\n  }\n}\n\n/**\n * Keeps track of the state of each box created as the Wu  quantization\n * algorithm progresses through dividing the image's pixels as plotted in RGB.\n */\nexport class Box {\n  constructor(\n    public r0: number = 0, public r1: number = 0, public g0: number = 0,\n    public g1: number = 0, public b0: number = 0, public b1: number = 0,\n    public vol: number = 0) { }\n}\n\n/**\n * Represents final result of Wu algorithm.\n */\nexport class CreateBoxesResult {\n  /**\n   * @param requestedCount how many colors the caller asked to be returned from\n   *     quantization.\n   * @param resultCount the actual number of colors achieved from quantization.\n   *     May be lower than the requested count.\n   */\n  constructor(public requestedCount: number, public resultCount: number) { }\n}\n\n/**\n * Represents the result of calculating where to cut an existing box in such\n * a way to maximize variance between the two new boxes created by a cut.\n */\nexport class MaximizeResult {\n  constructor(public cutLocation: number, public maximum: number) { }\n}\n// --- END FILE: quantize/quantizer_wu.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme.ts ---\n// This file is automatically generated. Do not modify it.\n\n/**\n * DEPRECATED. The `Scheme` class is deprecated in favor of `DynamicScheme`.\n * Please see\n * https://github.com/material-foundation/material-color-utilities/blob/main/make_schemes.md\n * for migration guidance.\n *\n * Represents a Material color scheme, a mapping of color roles to colors.\n */\nexport class Scheme {\n  get primary(): number {\n    return this.props.primary;\n  }\n\n  get onPrimary(): number {\n    return this.props.onPrimary;\n  }\n\n  get primaryContainer(): number {\n    return this.props.primaryContainer;\n  }\n\n  get onPrimaryContainer(): number {\n    return this.props.onPrimaryContainer;\n  }\n\n  get secondary(): number {\n    return this.props.secondary;\n  }\n\n  get onSecondary(): number {\n    return this.props.onSecondary;\n  }\n\n  get secondaryContainer(): number {\n    return this.props.secondaryContainer;\n  }\n\n  get onSecondaryContainer(): number {\n    return this.props.onSecondaryContainer;\n  }\n\n  get tertiary(): number {\n    return this.props.tertiary;\n  }\n\n  get onTertiary(): number {\n    return this.props.onTertiary;\n  }\n\n  get tertiaryContainer(): number {\n    return this.props.tertiaryContainer;\n  }\n\n  get onTertiaryContainer(): number {\n    return this.props.onTertiaryContainer;\n  }\n\n  get error(): number {\n    return this.props.error;\n  }\n\n  get onError(): number {\n    return this.props.onError;\n  }\n\n  get errorContainer(): number {\n    return this.props.errorContainer;\n  }\n\n  get onErrorContainer(): number {\n    return this.props.onErrorContainer;\n  }\n\n  get background(): number {\n    return this.props.background;\n  }\n\n  get onBackground(): number {\n    return this.props.onBackground;\n  }\n\n  get surface(): number {\n    return this.props.surface;\n  }\n\n  get onSurface(): number {\n    return this.props.onSurface;\n  }\n\n  get surfaceVariant(): number {\n    return this.props.surfaceVariant;\n  }\n\n  get onSurfaceVariant(): number {\n    return this.props.onSurfaceVariant;\n  }\n\n  get outline(): number {\n    return this.props.outline;\n  }\n\n  get outlineVariant(): number {\n    return this.props.outlineVariant;\n  }\n\n  get shadow(): number {\n    return this.props.shadow;\n  }\n\n  get scrim(): number {\n    return this.props.scrim;\n  }\n\n  get inverseSurface(): number {\n    return this.props.inverseSurface;\n  }\n\n  get inverseOnSurface(): number {\n    return this.props.inverseOnSurface;\n  }\n\n  get inversePrimary(): number {\n    return this.props.inversePrimary;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material color scheme, based on the color's hue.\n   */\n  static light(argb: number): Scheme {\n    return Scheme.lightFromCorePalette(CorePalette.of(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material color scheme, based on the color's hue.\n   */\n  static dark(argb: number): Scheme {\n    return Scheme.darkFromCorePalette(CorePalette.of(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material content color scheme, based on the color's hue.\n   */\n  static lightContent(argb: number): Scheme {\n    return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material content color scheme, based on the color's hue.\n   */\n  static darkContent(argb: number): Scheme {\n    return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));\n  }\n\n  /**\n   * Light scheme from core palette\n   */\n  static lightFromCorePalette(core: CorePalette): Scheme {\n    return new Scheme({\n      primary: core.a1.tone(40),\n      onPrimary: core.a1.tone(100),\n      primaryContainer: core.a1.tone(90),\n      onPrimaryContainer: core.a1.tone(10),\n      secondary: core.a2.tone(40),\n      onSecondary: core.a2.tone(100),\n      secondaryContainer: core.a2.tone(90),\n      onSecondaryContainer: core.a2.tone(10),\n      tertiary: core.a3.tone(40),\n      onTertiary: core.a3.tone(100),\n      tertiaryContainer: core.a3.tone(90),\n      onTertiaryContainer: core.a3.tone(10),\n      error: core.error.tone(40),\n      onError: core.error.tone(100),\n      errorContainer: core.error.tone(90),\n      onErrorContainer: core.error.tone(10),\n      background: core.n1.tone(99),\n      onBackground: core.n1.tone(10),\n      surface: core.n1.tone(99),\n      onSurface: core.n1.tone(10),\n      surfaceVariant: core.n2.tone(90),\n      onSurfaceVariant: core.n2.tone(30),\n      outline: core.n2.tone(50),\n      outlineVariant: core.n2.tone(80),\n      shadow: core.n1.tone(0),\n      scrim: core.n1.tone(0),\n      inverseSurface: core.n1.tone(20),\n      inverseOnSurface: core.n1.tone(95),\n      inversePrimary: core.a1.tone(80)\n    });\n  }\n\n  /**\n   * Dark scheme from core palette\n   */\n  static darkFromCorePalette(core: CorePalette): Scheme {\n    return new Scheme({\n      primary: core.a1.tone(80),\n      onPrimary: core.a1.tone(20),\n      primaryContainer: core.a1.tone(30),\n      onPrimaryContainer: core.a1.tone(90),\n      secondary: core.a2.tone(80),\n      onSecondary: core.a2.tone(20),\n      secondaryContainer: core.a2.tone(30),\n      onSecondaryContainer: core.a2.tone(90),\n      tertiary: core.a3.tone(80),\n      onTertiary: core.a3.tone(20),\n      tertiaryContainer: core.a3.tone(30),\n      onTertiaryContainer: core.a3.tone(90),\n      error: core.error.tone(80),\n      onError: core.error.tone(20),\n      errorContainer: core.error.tone(30),\n      onErrorContainer: core.error.tone(80),\n      background: core.n1.tone(10),\n      onBackground: core.n1.tone(90),\n      surface: core.n1.tone(10),\n      onSurface: core.n1.tone(90),\n      surfaceVariant: core.n2.tone(30),\n      onSurfaceVariant: core.n2.tone(80),\n      outline: core.n2.tone(60),\n      outlineVariant: core.n2.tone(30),\n      shadow: core.n1.tone(0),\n      scrim: core.n1.tone(0),\n      inverseSurface: core.n1.tone(90),\n      inverseOnSurface: core.n1.tone(20),\n      inversePrimary: core.a1.tone(40)\n    });\n  }\n\n  private constructor(private readonly props: {\n    primary: number,\n    onPrimary: number,\n    primaryContainer: number,\n    onPrimaryContainer: number,\n    secondary: number,\n    onSecondary: number,\n    secondaryContainer: number,\n    onSecondaryContainer: number,\n    tertiary: number,\n    onTertiary: number,\n    tertiaryContainer: number,\n    onTertiaryContainer: number,\n    error: number,\n    onError: number,\n    errorContainer: number,\n    onErrorContainer: number,\n    background: number,\n    onBackground: number,\n    surface: number,\n    onSurface: number,\n    surfaceVariant: number,\n    onSurfaceVariant: number,\n    outline: number,\n    outlineVariant: number,\n    shadow: number,\n    scrim: number,\n    inverseSurface: number,\n    inverseOnSurface: number,\n    inversePrimary: number\n  }) { }\n\n  toJSON() {\n    return {\n      ...this.props\n    };\n  }\n}\n// --- END FILE: scheme/scheme.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_android.ts ---\n/**\n * Represents an Android 12 color scheme, a mapping of color roles to colors.\n */\nexport class SchemeAndroid {\n  get colorAccentPrimary(): number {\n    return this.props.colorAccentPrimary;\n  }\n\n  get colorAccentPrimaryVariant(): number {\n    return this.props.colorAccentPrimaryVariant;\n  }\n\n  get colorAccentSecondary(): number {\n    return this.props.colorAccentSecondary;\n  }\n\n  get colorAccentSecondaryVariant(): number {\n    return this.props.colorAccentSecondaryVariant;\n  }\n\n  get colorAccentTertiary(): number {\n    return this.props.colorAccentTertiary;\n  }\n\n  get colorAccentTertiaryVariant(): number {\n    return this.props.colorAccentTertiaryVariant;\n  }\n\n  get textColorPrimary(): number {\n    return this.props.textColorPrimary;\n  }\n\n  get textColorSecondary(): number {\n    return this.props.textColorSecondary;\n  }\n\n  get textColorTertiary(): number {\n    return this.props.textColorTertiary;\n  }\n\n  get textColorPrimaryInverse(): number {\n    return this.props.textColorPrimaryInverse;\n  }\n\n  get textColorSecondaryInverse(): number {\n    return this.props.textColorSecondaryInverse;\n  }\n\n  get textColorTertiaryInverse(): number {\n    return this.props.textColorTertiaryInverse;\n  }\n\n  get colorBackground(): number {\n    return this.props.colorBackground;\n  }\n\n  get colorBackgroundFloating(): number {\n    return this.props.colorBackgroundFloating;\n  }\n\n  get colorSurface(): number {\n    return this.props.colorSurface;\n  }\n\n  get colorSurfaceVariant(): number {\n    return this.props.colorSurfaceVariant;\n  }\n\n  get colorSurfaceHighlight(): number {\n    return this.props.colorSurfaceHighlight;\n  }\n\n  get surfaceHeader(): number {\n    return this.props.surfaceHeader;\n  }\n\n  get underSurface(): number {\n    return this.props.underSurface;\n  }\n\n  get offState(): number {\n    return this.props.offState;\n  }\n\n  get accentSurface(): number {\n    return this.props.accentSurface;\n  }\n\n  get textPrimaryOnAccent(): number {\n    return this.props.textPrimaryOnAccent;\n  }\n\n  get textSecondaryOnAccent(): number {\n    return this.props.textSecondaryOnAccent;\n  }\n\n  get volumeBackground(): number {\n    return this.props.volumeBackground;\n  }\n\n  get scrim(): number {\n    return this.props.scrim;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Material color scheme, based on the color's hue.\n   */\n  static light(argb: number): SchemeAndroid {\n    const core = CorePalette.of(argb);\n    return SchemeAndroid.lightFromCorePalette(core);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Material color scheme, based on the color's hue.\n   */\n  static dark(argb: number): SchemeAndroid {\n    const core = CorePalette.of(argb);\n    return SchemeAndroid.darkFromCorePalette(core);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Light Android color scheme, based on the color's hue.\n   */\n  static lightContent(argb: number): SchemeAndroid {\n    const core = CorePalette.contentOf(argb);\n    return SchemeAndroid.lightFromCorePalette(core);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return Dark Android color scheme, based on the color's hue.\n   */\n  static darkContent(argb: number): SchemeAndroid {\n    const core = CorePalette.contentOf(argb);\n    return SchemeAndroid.darkFromCorePalette(core);\n  }\n\n  /**\n   * Light scheme from core palette\n   */\n  static lightFromCorePalette(core: CorePalette): SchemeAndroid {\n    return new SchemeAndroid({\n      colorAccentPrimary: core.a1.tone(90),\n      colorAccentPrimaryVariant: core.a1.tone(40),\n      colorAccentSecondary: core.a2.tone(90),\n      colorAccentSecondaryVariant: core.a2.tone(40),\n      colorAccentTertiary: core.a3.tone(90),\n      colorAccentTertiaryVariant: core.a3.tone(40),\n      textColorPrimary: core.n1.tone(10),\n      textColorSecondary: core.n2.tone(30),\n      textColorTertiary: core.n2.tone(50),\n      textColorPrimaryInverse: core.n1.tone(95),\n      textColorSecondaryInverse: core.n1.tone(80),\n      textColorTertiaryInverse: core.n1.tone(60),\n      colorBackground: core.n1.tone(95),\n      colorBackgroundFloating: core.n1.tone(98),\n      colorSurface: core.n1.tone(98),\n      colorSurfaceVariant: core.n1.tone(90),\n      colorSurfaceHighlight: core.n1.tone(100),\n      surfaceHeader: core.n1.tone(90),\n      underSurface: core.n1.tone(0),\n      offState: core.n1.tone(20),\n      accentSurface: core.a2.tone(95),\n      textPrimaryOnAccent: core.n1.tone(10),\n      textSecondaryOnAccent: core.n2.tone(30),\n      volumeBackground: core.n1.tone(25),\n      scrim: core.n1.tone(80),\n    });\n  }\n\n  /**\n   * Dark scheme from core palette\n   */\n  static darkFromCorePalette(core: CorePalette): SchemeAndroid {\n    return new SchemeAndroid({\n      colorAccentPrimary: core.a1.tone(90),\n      colorAccentPrimaryVariant: core.a1.tone(70),\n      colorAccentSecondary: core.a2.tone(90),\n      colorAccentSecondaryVariant: core.a2.tone(70),\n      colorAccentTertiary: core.a3.tone(90),\n      colorAccentTertiaryVariant: core.a3.tone(70),\n      textColorPrimary: core.n1.tone(95),\n      textColorSecondary: core.n2.tone(80),\n      textColorTertiary: core.n2.tone(60),\n      textColorPrimaryInverse: core.n1.tone(10),\n      textColorSecondaryInverse: core.n1.tone(30),\n      textColorTertiaryInverse: core.n1.tone(50),\n      colorBackground: core.n1.tone(10),\n      colorBackgroundFloating: core.n1.tone(10),\n      colorSurface: core.n1.tone(20),\n      colorSurfaceVariant: core.n1.tone(30),\n      colorSurfaceHighlight: core.n1.tone(35),\n      surfaceHeader: core.n1.tone(30),\n      underSurface: core.n1.tone(0),\n      offState: core.n1.tone(20),\n      accentSurface: core.a2.tone(95),\n      textPrimaryOnAccent: core.n1.tone(10),\n      textSecondaryOnAccent: core.n2.tone(30),\n      volumeBackground: core.n1.tone(25),\n      scrim: core.n1.tone(80),\n    });\n  }\n\n  private constructor(private readonly props: {\n    colorAccentPrimary: number,\n    colorAccentPrimaryVariant: number,\n    colorAccentSecondary: number,\n    colorAccentSecondaryVariant: number,\n    colorAccentTertiary: number,\n    colorAccentTertiaryVariant: number,\n    textColorPrimary: number,\n    textColorSecondary: number,\n    textColorTertiary: number,\n    textColorPrimaryInverse: number,\n    textColorSecondaryInverse: number,\n    textColorTertiaryInverse: number,\n    colorBackground: number,\n    colorBackgroundFloating: number,\n    colorSurface: number,\n    colorSurfaceVariant: number,\n    colorSurfaceHighlight: number,\n    surfaceHeader: number,\n    underSurface: number,\n    offState: number,\n    accentSurface: number,\n    textPrimaryOnAccent: number,\n    textSecondaryOnAccent: number,\n    volumeBackground: number,\n    scrim: number\n  }) { }\n\n  toJSON() {\n    return { ...this.props };\n  }\n}\n// --- END FILE: scheme/scheme_android.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_content.ts ---\n/**\n * A scheme that places the source color in `Scheme.primaryContainer`.\n *\n * Primary Container is the source color, adjusted for color relativity.\n * It maintains constant appearance in light mode and dark mode.\n * This adds ~5 tone in light mode, and subtracts ~5 tone in dark mode.\n * Tertiary Container is the complement to the source color, using\n * `TemperatureCache`. It also maintains constant appearance.\n */\nexport class SchemeContent extends DynamicScheme {\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorHct,\n      variant: Variant.CONTENT,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(\n        sourceColorHct.hue, sourceColorHct.chroma),\n      secondaryPalette: TonalPalette.fromHueAndChroma(\n        sourceColorHct.hue,\n        Math.max(sourceColorHct.chroma - 32.0, sourceColorHct.chroma * 0.5)),\n      tertiaryPalette: TonalPalette.fromInt(\n        DislikeAnalyzer\n          .fixIfDisliked(\n            new TemperatureCache(sourceColorHct).analogous(3, 6)[2])\n          .toInt()),\n      neutralPalette: TonalPalette.fromHueAndChroma(\n        sourceColorHct.hue, sourceColorHct.chroma / 8.0),\n      neutralVariantPalette: TonalPalette.fromHueAndChroma(\n        sourceColorHct.hue, sourceColorHct.chroma / 8.0 + 4.0),\n    });\n  }\n}\n// --- END FILE: scheme/scheme_content.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_expressive.ts ---\n/**\n * A Dynamic Color theme that is intentionally detached from the source color.\n */\nexport class SchemeExpressive extends DynamicScheme {\n  /**\n   * Hues (in degrees) used at breakpoints such that designers can specify a\n   * hue rotation that occurs at a given break point.\n   */\n  private static readonly hues: number[] = [\n    0.0,\n    21.0,\n    51.0,\n    121.0,\n    151.0,\n    191.0,\n    271.0,\n    321.0,\n    360.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Secondary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly secondaryRotations: number[] = [\n    45.0,\n    95.0,\n    45.0,\n    20.0,\n    45.0,\n    90.0,\n    45.0,\n    45.0,\n    45.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Tertiary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly tertiaryRotations: number[] = [\n    120.0,\n    120.0,\n    20.0,\n    45.0,\n    20.0,\n    15.0,\n    20.0,\n    120.0,\n    120.0,\n  ];\n\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorHct,\n      variant: Variant.EXPRESSIVE,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(\n        math.sanitizeDegreesDouble(sourceColorHct.hue + 240.0), 40.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(\n        DynamicScheme.getRotatedHue(\n          sourceColorHct, SchemeExpressive.hues,\n          SchemeExpressive.secondaryRotations),\n        24.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(\n        DynamicScheme.getRotatedHue(\n          sourceColorHct, SchemeExpressive.hues,\n          SchemeExpressive.tertiaryRotations),\n        32.0),\n      neutralPalette:\n        TonalPalette.fromHueAndChroma(sourceColorHct.hue + 15, 8.0),\n      neutralVariantPalette:\n        TonalPalette.fromHueAndChroma(sourceColorHct.hue + 15, 12.0),\n    });\n  }\n}\n// --- END FILE: scheme/scheme_expressive.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_fidelity.ts ---\n/**\n * A scheme that places the source color in `Scheme.primaryContainer`.\n *\n * Primary Container is the source color, adjusted for color relativity.\n * It maintains constant appearance in light mode and dark mode.\n * This adds ~5 tone in light mode, and subtracts ~5 tone in dark mode.\n * Tertiary Container is the complement to the source color, using\n * `TemperatureCache`. It also maintains constant appearance.\n */\nexport class SchemeFidelity extends DynamicScheme {\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorHct,\n      variant: Variant.FIDELITY,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(\n        sourceColorHct.hue, sourceColorHct.chroma),\n      secondaryPalette: TonalPalette.fromHueAndChroma(\n        sourceColorHct.hue,\n        Math.max(sourceColorHct.chroma - 32.0, sourceColorHct.chroma * 0.5)),\n      tertiaryPalette: TonalPalette.fromInt(\n        DislikeAnalyzer\n          .fixIfDisliked(new TemperatureCache(sourceColorHct).complement)\n          .toInt()),\n      neutralPalette: TonalPalette.fromHueAndChroma(\n        sourceColorHct.hue, sourceColorHct.chroma / 8.0),\n      neutralVariantPalette: TonalPalette.fromHueAndChroma(\n        sourceColorHct.hue, sourceColorHct.chroma / 8.0 + 4.0),\n    });\n  }\n}\n// --- END FILE: scheme/scheme_fidelity.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_fruit_salad.ts ---\n/**\n * A playful theme - the source color's hue does not appear in the theme.\n */\nexport class SchemeFruitSalad extends DynamicScheme {\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorHct,\n      variant: Variant.FRUIT_SALAD,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(\n        math.sanitizeDegreesDouble(sourceColorHct.hue - 50.0), 48.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(\n        math.sanitizeDegreesDouble(sourceColorHct.hue - 50.0), 36.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 36.0),\n      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 10.0),\n      neutralVariantPalette:\n        TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0),\n    });\n  }\n}\n// --- END FILE: scheme/scheme_fruit_salad.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_monochrome.ts ---\n/** A Dynamic Color theme that is grayscale. */\nexport class SchemeMonochrome extends DynamicScheme {\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorHct,\n      variant: Variant.MONOCHROME,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n      neutralVariantPalette:\n        TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n    });\n  }\n}\n// --- END FILE: scheme/scheme_monochrome.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_neutral.ts ---\n/** A Dynamic Color theme that is near grayscale. */\nexport class SchemeNeutral extends DynamicScheme {\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorHct,\n      variant: Variant.NEUTRAL,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 8.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0),\n      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 2.0),\n      neutralVariantPalette:\n        TonalPalette.fromHueAndChroma(sourceColorHct.hue, 2.0),\n    });\n  }\n}\n// --- END FILE: scheme/scheme_neutral.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_rainbow.ts ---\n/**\n * A playful theme - the source color's hue does not appear in the theme.\n */\nexport class SchemeRainbow extends DynamicScheme {\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorHct,\n      variant: Variant.RAINBOW,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 48.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(\n        math.sanitizeDegreesDouble(sourceColorHct.hue + 60.0), 24.0),\n      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n      neutralVariantPalette:\n        TonalPalette.fromHueAndChroma(sourceColorHct.hue, 0.0),\n    });\n  }\n}\n// --- END FILE: scheme/scheme_rainbow.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_tonal_spot.ts ---\n/**\n * A Dynamic Color theme with low to medium colorfulness and a Tertiary\n * TonalPalette with a hue related to the source color.\n *\n * The default Material You theme on Android 12 and 13.\n */\nexport class SchemeTonalSpot extends DynamicScheme {\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorHct,\n      variant: Variant.TONAL_SPOT,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 36.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 16.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(\n        math.sanitizeDegreesDouble(sourceColorHct.hue + 60.0),\n        24.0,\n      ),\n      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 6.0),\n      neutralVariantPalette:\n        TonalPalette.fromHueAndChroma(sourceColorHct.hue, 8.0),\n    });\n  }\n}\n// --- END FILE: scheme/scheme_tonal_spot.ts ---\n\n\n// --- BEGIN FILE: scheme/scheme_vibrant.ts ---\n/**\n * A Dynamic Color theme that maxes out colorfulness at each position in the\n * Primary Tonal Palette.\n */\nexport class SchemeVibrant extends DynamicScheme {\n  /**\n   * Hues (in degrees) used at breakpoints such that designers can specify a\n   * hue rotation that occurs at a given break point.\n   */\n  private static readonly hues = [\n    0.0,\n    41.0,\n    61.0,\n    101.0,\n    131.0,\n    181.0,\n    251.0,\n    301.0,\n    360.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Secondary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly secondaryRotations = [\n    18.0,\n    15.0,\n    10.0,\n    12.0,\n    15.0,\n    18.0,\n    15.0,\n    12.0,\n    12.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Tertiary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly tertiaryRotations = [\n    35.0,\n    30.0,\n    20.0,\n    25.0,\n    30.0,\n    35.0,\n    30.0,\n    25.0,\n    25.0,\n  ];\n\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorHct,\n      variant: Variant.VIBRANT,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 200.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(\n        DynamicScheme.getRotatedHue(\n          sourceColorHct, SchemeVibrant.hues,\n          SchemeVibrant.secondaryRotations),\n        24.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(\n        DynamicScheme.getRotatedHue(\n          sourceColorHct, SchemeVibrant.hues,\n          SchemeVibrant.tertiaryRotations),\n        32.0),\n      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 10.0),\n      neutralVariantPalette:\n        TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12.0),\n    });\n  }\n}\n// --- END FILE: scheme/scheme_vibrant.ts ---\n\n\n// --- BEGIN FILE: score/score.ts ---\n/**\n * Default options for ranking colors based on usage counts.\n * desired: is the max count of the colors returned.\n * fallbackColorARGB: Is the default color that should be used if no\n *                    other colors are suitable.\n * filter: controls if the resulting colors should be filtered to not include\n *         hues that are not used often enough, and colors that are effectively\n *         grayscale.\n */\ndeclare interface ScoreOptions {\n  desired?: number;\n  fallbackColorARGB?: number;\n  filter?: boolean;\n}\n\nconst SCORE_OPTION_DEFAULTS = {\n  desired: 4,  // 4 colors matches what Android wallpaper picker.\n  fallbackColorARGB: 0xff4285f4,  // Google Blue.\n  filter: true,  // Avoid unsuitable colors.\n};\n\nexport function compare(a: { hct: Hct, score: number }, b: { hct: Hct, score: number }): number {\n  if (a.score > b.score) {\n    return -1;\n  } else if (a.score < b.score) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n *  Given a large set of colors, remove colors that are unsuitable for a UI\n *  theme, and rank the rest based on suitability.\n *\n *  Enables use of a high cluster count for image quantization, thus ensuring\n *  colors aren't muddied, while curating the high cluster count to a much\n *  smaller number of appropriate choices.\n */\nexport class Score {\n  private static readonly TARGET_CHROMA = 48.0;  // A1 Chroma\n  private static readonly WEIGHT_PROPORTION = 0.7;\n  private static readonly WEIGHT_CHROMA_ABOVE = 0.3;\n  private static readonly WEIGHT_CHROMA_BELOW = 0.1;\n  private static readonly CUTOFF_CHROMA = 5.0;\n  private static readonly CUTOFF_EXCITED_PROPORTION = 0.01;\n\n  private constructor() { }\n\n  /**\n   * Given a map with keys of colors and values of how often the color appears,\n   * rank the colors based on suitability for being used for a UI theme.\n   *\n   * @param colorsToPopulation map with keys of colors and values of how often\n   *     the color appears, usually from a source image.\n   * @param {ScoreOptions} options optional parameters.\n   * @return Colors sorted by suitability for a UI theme. The most suitable\n   *     color is the first item, the least suitable is the last. There will\n   *     always be at least one color returned. If all the input colors\n   *     were not suitable for a theme, a default fallback color will be\n   *     provided, Google Blue.\n   */\n  static score(\n    colorsToPopulation: Map<number, number>, options?: ScoreOptions):\n    number[] {\n    const { desired, fallbackColorARGB, filter } = { ...SCORE_OPTION_DEFAULTS, ...options };\n    // Get the HCT color for each Argb value, while finding the per hue count and\n    // total count.\n    const colorsHct: Hct[] = [];\n    const huePopulation = new Array<number>(360).fill(0);\n    let populationSum = 0;\n    for (const [argb, population] of colorsToPopulation.entries()) {\n      const hct = Hct.fromInt(argb);\n      colorsHct.push(hct);\n      const hue = Math.floor(hct.hue);\n      huePopulation[hue] += population;\n      populationSum += population;\n    }\n\n    // Hues with more usage in neighboring 30 degree slice get a larger number.\n    const hueExcitedProportions = new Array<number>(360).fill(0.0);\n    for (let hue = 0; hue < 360; hue++) {\n      const proportion = huePopulation[hue] / populationSum;\n      for (let i = hue - 14; i < hue + 16; i++) {\n        const neighborHue = math.sanitizeDegreesInt(i);\n        hueExcitedProportions[neighborHue] += proportion;\n      }\n    }\n\n    // Scores each HCT color based on usage and chroma, while optionally\n    // filtering out values that do not have enough chroma or usage.\n    const scoredHct = new Array<{ hct: Hct, score: number }>();\n    for (const hct of colorsHct) {\n      const hue = math.sanitizeDegreesInt(Math.round(hct.hue));\n      const proportion = hueExcitedProportions[hue];\n      if (filter && (hct.chroma < Score.CUTOFF_CHROMA || proportion <= Score.CUTOFF_EXCITED_PROPORTION)) {\n        continue;\n      }\n\n      const proportionScore = proportion * 100.0 * Score.WEIGHT_PROPORTION;\n      const chromaWeight = hct.chroma < Score.TARGET_CHROMA ? Score.WEIGHT_CHROMA_BELOW : Score.WEIGHT_CHROMA_ABOVE;\n      const chromaScore = (hct.chroma - Score.TARGET_CHROMA) * chromaWeight;\n      const score = proportionScore + chromaScore;\n      scoredHct.push({ hct, score });\n    }\n    // Sorted so that colors with higher scores come first.\n    scoredHct.sort(compare);\n\n    // Iterates through potential hue differences in degrees in order to select\n    // the colors with the largest distribution of hues possible. Starting at\n    // 90 degrees(maximum difference for 4 colors) then decreasing down to a\n    // 15 degree minimum.\n    const chosenColors: Hct[] = [];\n    for (let differenceDegrees = 90; differenceDegrees >= 15; differenceDegrees--) {\n      chosenColors.length = 0;\n      for (const { hct } of scoredHct) {\n        const duplicateHue = chosenColors.find(chosenHct => {\n          return math.differenceDegrees(hct.hue, chosenHct.hue) < differenceDegrees;\n        });\n        if (!duplicateHue) {\n          chosenColors.push(hct);\n        }\n        if (chosenColors.length >= desired) break;\n      }\n      if (chosenColors.length >= desired) break;\n    }\n    const colors: number[] = [];\n    if (chosenColors.length === 0) {\n      colors.push(fallbackColorARGB);\n    }\n    for (const chosenHct of chosenColors) {\n      colors.push(chosenHct.toInt());\n    }\n    return colors;\n  }\n}\n// --- END FILE: score/score.ts ---\n\n\n// --- BEGIN FILE: temperature/temperature_cache.ts ---\n// This file is automatically generated. Do not modify it.\n\n/**\n * Design utilities using color temperature theory.\n *\n * Analogous colors, complementary color, and cache to efficiently, lazily,\n * generate data for calculations when needed.\n */\nexport class TemperatureCache {\n  constructor(public input: Hct) { }\n\n  hctsByTempCache: Hct[] = [];\n  hctsByHueCache: Hct[] = [];\n  tempsByHctCache = new Map<Hct, number>();\n  inputRelativeTemperatureCache: number = -1.0;\n  complementCache: Hct | null = null;\n\n  get hctsByTemp(): Hct[] {\n    if (this.hctsByTempCache.length > 0) {\n      return this.hctsByTempCache;\n    }\n\n    const hcts = this.hctsByHue.concat([this.input]);\n    const temperaturesByHct = this.tempsByHct;\n    hcts.sort((a, b) => temperaturesByHct.get(a)! - temperaturesByHct.get(b)!);\n    this.hctsByTempCache = hcts;\n    return hcts;\n  }\n\n  get warmest(): Hct {\n    return this.hctsByTemp[this.hctsByTemp.length - 1];\n  }\n\n  get coldest(): Hct {\n    return this.hctsByTemp[0];\n  }\n\n  /**\n   * A set of colors with differing hues, equidistant in temperature.\n   *\n   * In art, this is usually described as a set of 5 colors on a color wheel\n   * divided into 12 sections. This method allows provision of either of those\n   * values.\n   *\n   * Behavior is undefined when [count] or [divisions] is 0.\n   * When divisions < count, colors repeat.\n   *\n   * [count] The number of colors to return, includes the input color.\n   * [divisions] The number of divisions on the color wheel.\n   */\n  analogous(count = 5, divisions = 12): Hct[] {\n    const startHue = Math.round(this.input.hue);\n    const startHct = this.hctsByHue[startHue];\n    let lastTemp = this.relativeTemperature(startHct);\n    const allColors = [startHct];\n\n    let absoluteTotalTempDelta = 0.0;\n    for (let i = 0; i < 360; i++) {\n      const hue = math.sanitizeDegreesInt(startHue + i);\n      const hct = this.hctsByHue[hue];\n      const temp = this.relativeTemperature(hct);\n      const tempDelta = Math.abs(temp - lastTemp);\n      lastTemp = temp;\n      absoluteTotalTempDelta += tempDelta;\n    }\n    let hueAddend = 1;\n    const tempStep = absoluteTotalTempDelta / divisions;\n    let totalTempDelta = 0.0;\n    lastTemp = this.relativeTemperature(startHct);\n    while (allColors.length < divisions) {\n      const hue = math.sanitizeDegreesInt(startHue + hueAddend);\n      const hct = this.hctsByHue[hue];\n      const temp = this.relativeTemperature(hct);\n      const tempDelta = Math.abs(temp - lastTemp);\n      totalTempDelta += tempDelta;\n\n      const desiredTotalTempDeltaForIndex = allColors.length * tempStep;\n      let indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;\n      let indexAddend = 1;\n      // Keep adding this hue to the answers until its temperature is\n      // insufficient. This ensures consistent behavior when there aren't\n      // [divisions] discrete steps between 0 and 360 in hue with [tempStep]\n      // delta in temperature between them.\n      //\n      // For example, white and black have no analogues: there are no other\n      // colors at T100/T0. Therefore, they should just be added to the array\n      // as answers.\n      while (indexSatisfied && allColors.length < divisions) {\n        allColors.push(hct);\n        const desiredTotalTempDeltaForIndex =\n          ((allColors.length + indexAddend) * tempStep);\n        indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;\n        indexAddend++;\n      }\n      lastTemp = temp;\n      hueAddend++;\n      if (hueAddend > 360) {\n        while (allColors.length < divisions) {\n          allColors.push(hct);\n        }\n        break;\n      }\n    }\n\n    const answers = [this.input];\n\n    // First, generate analogues from rotating counter-clockwise.\n    const increaseHueCount = Math.floor((count - 1) / 2.0);\n    for (let i = 1; i < (increaseHueCount + 1); i++) {\n      let index = 0 - i;\n      while (index < 0) {\n        index = allColors.length + index;\n      }\n      if (index >= allColors.length) {\n        index = index % allColors.length;\n      }\n      answers.splice(0, 0, allColors[index]);\n    }\n\n    // Second, generate analogues from rotating clockwise.\n    const decreaseHueCount = count - increaseHueCount - 1;\n    for (let i = 1; i < (decreaseHueCount + 1); i++) {\n      let index = i;\n      while (index < 0) {\n        index = allColors.length + index;\n      }\n      if (index >= allColors.length) {\n        index = index % allColors.length;\n      }\n      answers.push(allColors[index]);\n    }\n\n    return answers;\n  }\n\n  /**\n   * A color that complements the input color aesthetically.\n   *\n   * In art, this is usually described as being across the color wheel.\n   * History of this shows intent as a color that is just as cool-warm as the\n   * input color is warm-cool.\n   */\n  get complement(): Hct {\n    if (this.complementCache != null) {\n      return this.complementCache;\n    }\n\n    const coldestHue = this.coldest.hue;\n    const coldestTemp = this.tempsByHct.get(this.coldest)!;\n\n    const warmestHue = this.warmest.hue;\n    const warmestTemp = this.tempsByHct.get(this.warmest)!;\n    const range = warmestTemp - coldestTemp;\n    const startHueIsColdestToWarmest =\n      TemperatureCache.isBetween(this.input.hue, coldestHue, warmestHue);\n    const startHue = startHueIsColdestToWarmest ? warmestHue : coldestHue;\n    const endHue = startHueIsColdestToWarmest ? coldestHue : warmestHue;\n    const directionOfRotation = 1.0;\n    let smallestError = 1000.0;\n    let answer = this.hctsByHue[Math.round(this.input.hue)];\n\n    const complementRelativeTemp = 1.0 - this.inputRelativeTemperature;\n    // Find the color in the other section, closest to the inverse percentile\n    // of the input color. This is the complement.\n    for (let hueAddend = 0.0; hueAddend <= 360.0; hueAddend += 1.0) {\n      const hue = math.sanitizeDegreesDouble(\n        startHue + directionOfRotation * hueAddend);\n      if (!TemperatureCache.isBetween(hue, startHue, endHue)) {\n        continue;\n      }\n      const possibleAnswer = this.hctsByHue[Math.round(hue)];\n      const relativeTemp =\n        (this.tempsByHct.get(possibleAnswer)! - coldestTemp) / range;\n      const error = Math.abs(complementRelativeTemp - relativeTemp);\n      if (error < smallestError) {\n        smallestError = error;\n        answer = possibleAnswer;\n      }\n    }\n    this.complementCache = answer;\n    return this.complementCache;\n  }\n\n  /**\n   * Temperature relative to all colors with the same chroma and tone.\n   * Value on a scale from 0 to 1.\n   */\n  relativeTemperature(hct: Hct): number {\n    const range =\n      this.tempsByHct.get(this.warmest)! - this.tempsByHct.get(this.coldest)!;\n    const differenceFromColdest =\n      this.tempsByHct.get(hct)! - this.tempsByHct.get(this.coldest)!;\n    // Handle when there's no difference in temperature between warmest and\n    // coldest: for example, at T100, only one color is available, white.\n    if (range === 0.0) {\n      return 0.5;\n    }\n    return differenceFromColdest / range;\n  }\n\n  /** Relative temperature of the input color. See [relativeTemperature]. */\n  get inputRelativeTemperature(): number {\n    if (this.inputRelativeTemperatureCache >= 0.0) {\n      return this.inputRelativeTemperatureCache;\n    }\n\n    this.inputRelativeTemperatureCache = this.relativeTemperature(this.input);\n    return this.inputRelativeTemperatureCache;\n  }\n\n  /** A Map with keys of HCTs in [hctsByTemp], values of raw temperature. */\n  get tempsByHct(): Map<Hct, number> {\n    if (this.tempsByHctCache.size > 0) {\n      return this.tempsByHctCache;\n    }\n    const allHcts = this.hctsByHue.concat([this.input]);\n    const temperaturesByHct = new Map<Hct, number>();\n    for (const e of allHcts) {\n      temperaturesByHct.set(e, TemperatureCache.rawTemperature(e));\n    }\n    this.tempsByHctCache = temperaturesByHct;\n    return temperaturesByHct;\n  }\n\n  /**\n   * HCTs for all hues, with the same chroma/tone as the input.\n   * Sorted ascending, hue 0 to 360.\n   */\n  get hctsByHue(): Hct[] {\n    if (this.hctsByHueCache.length > 0) {\n      return this.hctsByHueCache;\n    }\n    const hcts: Hct[] = [];\n    for (let hue = 0.0; hue <= 360.0; hue += 1.0) {\n      const colorAtHue = Hct.from(hue, this.input.chroma, this.input.tone);\n      hcts.push(colorAtHue);\n    }\n    this.hctsByHueCache = hcts;\n    return this.hctsByHueCache;\n  }\n\n  /** Determines if an angle is between two other angles, rotating clockwise. */\n  static isBetween(angle: number, a: number, b: number): boolean {\n    if (a < b) {\n      return a <= angle && angle <= b;\n    }\n    return a <= angle || angle <= b;\n  }\n\n  /**\n   * Value representing cool-warm factor of a color.\n   * Values below 0 are considered cool, above, warm.\n   *\n   * Color science has researched emotion and harmony, which art uses to select\n   * colors. Warm-cool is the foundation of analogous and complementary colors.\n   * See:\n   * - Li-Chen Ou's Chapter 19 in Handbook of Color Psychology (2015).\n   * - Josef Albers' Interaction of Color chapters 19 and 21.\n   *\n   * Implementation of Ou, Woodcock and Wright's algorithm, which uses\n   * L*a*b* / LCH color space.\n   * Return value has these properties:\n   * - Values below 0 are cool, above 0 are warm.\n   * - Lower bound: -0.52 - (chroma ^ 1.07 / 20). L*a*b* chroma is infinite.\n   *   Assuming max of 130 chroma, -9.66.\n   * - Upper bound: -0.52 + (chroma ^ 1.07 / 20). L*a*b* chroma is infinite.\n   *   Assuming max of 130 chroma, 8.61.\n   */\n  static rawTemperature(color: Hct): number {\n    const lab = utils.labFromArgb(color.toInt());\n    const hue = math.sanitizeDegreesDouble(\n      Math.atan2(lab[2], lab[1]) * 180.0 / Math.PI);\n    const chroma = Math.sqrt((lab[1] * lab[1]) + (lab[2] * lab[2]));\n    const temperature = -0.5 +\n      0.02 * Math.pow(chroma, 1.07) *\n      Math.cos(\n        math.sanitizeDegreesDouble(hue - 50.0) * Math.PI / 180.0,\n      );\n    return temperature;\n  }\n}\n// --- END FILE: temperature/temperature_cache.ts ---\n\n\n// --- BEGIN FILE: utils/color_utils.ts ---\n// This file is automatically generated. Do not modify it.\n\n\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\n\nconst SRGB_TO_XYZ = [\n  [0.41233895, 0.35762064, 0.18051042],\n  [0.2126, 0.7152, 0.0722],\n  [0.01932141, 0.11916382, 0.95034478],\n];\n\nconst XYZ_TO_SRGB = [\n  [\n    3.2413774792388685,\n    -1.5376652402851851,\n    -0.49885366846268053,\n  ],\n  [\n    -0.9691452513005321,\n    1.8758853451067872,\n    0.04156585616912061,\n  ],\n  [\n    0.05562093689691305,\n    -0.20395524564742123,\n    1.0571799111220335,\n  ],\n];\n\nconst WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red: number, green: number, blue: number): number {\n  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>>\n    0;\n}\n\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb: number[]): number {\n  const r = delinearized(linrgb[0]);\n  const g = delinearized(linrgb[1]);\n  const b = delinearized(linrgb[2]);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb: number): number {\n  return argb >> 24 & 255;\n}\n\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb: number): number {\n  return argb >> 16 & 255;\n}\n\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb: number): number {\n  return argb >> 8 & 255;\n}\n\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb: number): number {\n  return argb & 255;\n}\n\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb: number): boolean {\n  return alphaFromArgb(argb) >= 255;\n}\n\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x: number, y: number, z: number): number {\n  const matrix = XYZ_TO_SRGB;\n  const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n  const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n  const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n  const r = delinearized(linearR);\n  const g = delinearized(linearG);\n  const b = delinearized(linearB);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb: number): number[] {\n  const r = linearized(redFromArgb(argb));\n  const g = linearized(greenFromArgb(argb));\n  const b = linearized(blueFromArgb(argb));\n  return math.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n\n/**\n * Converts a color represented in Lab color space into an ARGB\n * integer.\n */\nexport function argbFromLab(l: number, a: number, b: number): number {\n  const whitePoint = WHITE_POINT_D65;\n  const fy = (l + 16.0) / 116.0;\n  const fx = a / 500.0 + fy;\n  const fz = fy - b / 200.0;\n  const xNormalized = labInvf(fx);\n  const yNormalized = labInvf(fy);\n  const zNormalized = labInvf(fz);\n  const x = xNormalized * whitePoint[0];\n  const y = yNormalized * whitePoint[1];\n  const z = zNormalized * whitePoint[2];\n  return argbFromXyz(x, y, z);\n}\n\n/**\n * Converts a color from ARGB representation to L*a*b*\n * representation.\n *\n * @param argb the ARGB representation of a color\n * @return a Lab object representing the color\n */\nexport function labFromArgb(argb: number): number[] {\n  const linearR = linearized(redFromArgb(argb));\n  const linearG = linearized(greenFromArgb(argb));\n  const linearB = linearized(blueFromArgb(argb));\n  const matrix = SRGB_TO_XYZ;\n  const x =\n    matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;\n  const y =\n    matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;\n  const z =\n    matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;\n  const whitePoint = WHITE_POINT_D65;\n  const xNormalized = x / whitePoint[0];\n  const yNormalized = y / whitePoint[1];\n  const zNormalized = z / whitePoint[2];\n  const fx = labF(xNormalized);\n  const fy = labF(yNormalized);\n  const fz = labF(zNormalized);\n  const l = 116.0 * fy - 16;\n  const a = 500.0 * (fx - fy);\n  const b = 200.0 * (fy - fz);\n  return [l, a, b];\n}\n\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar: number): number {\n  const y = yFromLstar(lstar);\n  const component = delinearized(y);\n  return argbFromRgb(component, component, component);\n}\n\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb: number): number {\n  const y = xyzFromArgb(argb)[1];\n  return 116.0 * labF(y / 100.0) - 16.0;\n}\n\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar: number): number {\n  return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n\n/**\n * Converts a Y value to an L* value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param y Y in XYZ\n * @return L* in L*a*b*\n */\nexport function lstarFromY(y: number): number {\n  return labF(y / 100.0) * 116.0 - 16.0;\n}\n\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 255.0;\n  if (normalized <= 0.040449936) {\n    return normalized / 12.92 * 100.0;\n  } else {\n    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n  }\n}\n\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 100.0;\n  let delinearized = 0.0;\n  if (normalized <= 0.0031308) {\n    delinearized = normalized * 12.92;\n  } else {\n    delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n  }\n  return math.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65(): number[] {\n  return WHITE_POINT_D65;\n}\n\nexport function labF(t: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  if (t > e) {\n    return Math.pow(t, 1.0 / 3.0);\n  } else {\n    return (kappa * t + 16) / 116;\n  }\n}\n\nexport function labInvf(ft: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  const ft3 = ft * ft * ft;\n  if (ft3 > e) {\n    return ft3;\n  } else {\n    return (116 * ft - 16) / kappa;\n  }\n}\n// --- END FILE: utils/color_utils.ts ---\n\n\n// --- BEGIN FILE: utils/image_utils.ts ---\n/**\n * Get the source color from an image.\n *\n * @param image The image element\n * @return Source color - the color most suitable for creating a UI theme\n */\nexport async function sourceColorFromImage(image: HTMLImageElement) {\n  // Convert Image data to Pixel Array\n  const imageBytes = await new Promise<Uint8ClampedArray>((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    if (!context) {\n      reject(new Error('Could not get canvas context'));\n      return;\n    }\n    const loadCallback = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      let rect = [0, 0, image.width, image.height];\n      const area = image.dataset['area'];\n      if (area && /^\\d+(\\s*,\\s*\\d+){3}$/.test(area)) {\n        rect = area.split(/\\s*,\\s*/).map(s => {\n          // tslint:disable-next-line:ban\n          return parseInt(s, 10);\n        });\n      }\n      const [sx, sy, sw, sh] = rect;\n      resolve(context.getImageData(sx, sy, sw, sh).data);\n    };\n    const errorCallback = () => {\n      reject(new Error('Image load failed'));\n    };\n    if (image.complete) {\n      loadCallback();\n    } else {\n      image.onload = loadCallback;\n      image.onerror = errorCallback;\n    }\n  });\n\n  return sourceColorFromImageBytes(imageBytes);\n}\n\n/**\n * Get the source color from image bytes.\n *\n * @param imageBytes The image bytes\n * @return Source color - the color most suitable for creating a UI theme\n */\nexport function sourceColorFromImageBytes(imageBytes: Uint8ClampedArray) {\n  // Convert Image data to Pixel Array\n  const pixels: number[] = [];\n  for (let i = 0; i < imageBytes.length; i += 4) {\n    const r = imageBytes[i];\n    const g = imageBytes[i + 1];\n    const b = imageBytes[i + 2];\n    const a = imageBytes[i + 3];\n    if (a < 255) {\n      continue;\n    }\n    const argb = argbFromRgb(r, g, b);\n    pixels.push(argb);\n  }\n\n  // Convert Pixels to Material Colors\n  const result = QuantizerCelebi.quantize(pixels, 128);\n  const ranked = Score.score(result);\n  const top = ranked[0];\n  return top;\n}\n// --- END FILE: utils/image_utils.ts ---\n\n\n// --- BEGIN FILE: utils/math_utils.ts ---\n// This file is automatically generated. Do not modify it.\n\n/**\n * Utility methods for mathematical operations.\n */\n\n/**\n * The signum function.\n *\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\n */\nexport function signum(num: number): number {\n  if (num < 0) {\n    return -1;\n  } else if (num === 0) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n/**\n * The linear interpolation function.\n *\n * @return start if amount = 0 and stop if amount = 1\n */\nexport function lerp(start: number, stop: number, amount: number): number {\n  return (1.0 - amount) * start + amount * stop;\n}\n\n/**\n * Clamps an integer between two integers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampInt(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Clamps an integer between two floating-point numbers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampDouble(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Sanitizes a degree measure as an integer.\n *\n * @return a degree measure between 0 (inclusive) and 360\n * (exclusive).\n */\nexport function sanitizeDegreesInt(degrees: number): number {\n  degrees = degrees % 360;\n  if (degrees < 0) {\n    degrees = degrees + 360;\n  }\n  return degrees;\n}\n\n/**\n * Sanitizes a degree measure as a floating-point number.\n *\n * @return a degree measure between 0.0 (inclusive) and 360.0\n * (exclusive).\n */\nexport function sanitizeDegreesDouble(degrees: number): number {\n  degrees = degrees % 360.0;\n  if (degrees < 0) {\n    degrees = degrees + 360.0;\n  }\n  return degrees;\n}\n\n/**\n * Sign of direction change needed to travel from one angle to\n * another.\n *\n * For angles that are 180 degrees apart from each other, both\n * directions have the same travel distance, so either direction is\n * shortest. The value 1.0 is returned in this case.\n *\n * @param from The angle travel starts from, in degrees.\n * @param to The angle travel ends at, in degrees.\n * @return -1 if decreasing from leads to the shortest travel\n * distance, 1 if increasing from leads to the shortest travel\n * distance.\n */\nexport function rotationDirection(from: number, to: number): number {\n  const increasingDifference = sanitizeDegreesDouble(to - from);\n  return increasingDifference <= 180.0 ? 1.0 : -1.0;\n}\n\n/**\n * Distance of two points on a circle, represented using degrees.\n */\nexport function differenceDegrees(a: number, b: number): number {\n  return 180.0 - Math.abs(Math.abs(a - b) - 180.0);\n}\n\n/**\n * Multiplies a 1x3 row vector with a 3x3 matrix.\n */\nexport function matrixMultiply(row: number[], matrix: number[][]): number[] {\n  const a =\n    row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];\n  const b =\n    row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];\n  const c =\n    row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];\n  return [a, b, c];\n}\n// --- END FILE: utils/math_utils.ts ---\n\n\n// --- BEGIN FILE: utils/string_utils.ts ---\n/**\n * Utility methods for hexadecimal representations of colors.\n */\n\n/**\n * @param argb ARGB representation of a color.\n * @return Hex string representing color, ex. #ff0000 for red.\n */\nexport function hexFromArgb(argb: number) {\n  const r = utils.redFromArgb(argb);\n  const g = utils.greenFromArgb(argb);\n  const b = utils.blueFromArgb(argb);\n  const outParts = [r.toString(16), g.toString(16), b.toString(16)];\n\n  // Pad single-digit output values\n  for (const [i, part] of outParts.entries()) {\n    if (part.length === 1) {\n      outParts[i] = '0' + part;\n    }\n  }\n\n  return '#' + outParts.join('');\n}\n\n/**\n * @param hex String representing color as hex code. Accepts strings with or\n *     without leading #, and string representing the color using 3, 6, or 8\n *     hex characters.\n * @return ARGB representation of color.\n */\nexport function argbFromHex(hex: string) {\n  hex = hex.replace('#', '');\n  const isThree = hex.length === 3;\n  const isSix = hex.length === 6;\n  const isEight = hex.length === 8;\n  if (!isThree && !isSix && !isEight) {\n    throw new Error('unexpected hex ' + hex);\n  }\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (isThree) {\n    r = parseIntHex(hex.slice(0, 1).repeat(2));\n    g = parseIntHex(hex.slice(1, 2).repeat(2));\n    b = parseIntHex(hex.slice(2, 3).repeat(2));\n  } else if (isSix) {\n    r = parseIntHex(hex.slice(0, 2));\n    g = parseIntHex(hex.slice(2, 4));\n    b = parseIntHex(hex.slice(4, 6));\n  } else if (isEight) {\n    r = parseIntHex(hex.slice(2, 4));\n    g = parseIntHex(hex.slice(4, 6));\n    b = parseIntHex(hex.slice(6, 8));\n  }\n\n  return (\n    ((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>>\n    0);\n}\n\nfunction parseIntHex(value: string) {\n  // tslint:disable-next-line:ban\n  return parseInt(value, 16);\n}\n// --- END FILE: utils/string_utils.ts ---\n\n\n// --- BEGIN FILE: utils/theme_utils.ts ---\n/**\n * Custom color used to pair with a theme\n */\nexport interface CustomColor {\n  value: number;\n  name: string;\n  blend: boolean;\n}\n\n/**\n * Color group\n */\nexport interface ColorGroup {\n  color: number;\n  onColor: number;\n  colorContainer: number;\n  onColorContainer: number;\n}\n\n/**\n * Custom Color Group\n */\nexport interface CustomColorGroup {\n  color: CustomColor;\n  value: number;\n  light: ColorGroup;\n  dark: ColorGroup;\n}\n\n/**\n * Theme\n */\nexport interface Theme {\n  source: number;\n  schemes: { light: Scheme; dark: Scheme; };\n  palettes: {\n    primary: TonalPalette; secondary: TonalPalette; tertiary: TonalPalette;\n    neutral: TonalPalette;\n    neutralVariant: TonalPalette;\n    error: TonalPalette;\n  };\n  customColors: CustomColorGroup[];\n}\n\n/**\n * Generate a theme from a source color\n *\n * @param source Source color\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport function themeFromSourceColor(\n  source: number, customColors: CustomColor[] = []): Theme {\n  const palette = CorePalette.of(source);\n  return {\n    source,\n    schemes: {\n      light: Scheme.light(source),\n      dark: Scheme.dark(source),\n    },\n    palettes: {\n      primary: palette.a1,\n      secondary: palette.a2,\n      tertiary: palette.a3,\n      neutral: palette.n1,\n      neutralVariant: palette.n2,\n      error: palette.error,\n    },\n    customColors: customColors.map((c) => customColor(source, c)),\n  };\n}\n\n/**\n * Generate a theme from an image source\n *\n * @param image Image element\n * @param customColors Array of custom colors\n * @return Theme object\n */\nexport async function themeFromImage(\n  image: HTMLImageElement, customColors: CustomColor[] = []) {\n  const source = await sourceColorFromImage(image);\n  return themeFromSourceColor(source, customColors);\n}\n\n/**\n * Generate custom color group from source and target color\n *\n * @param source Source color\n * @param color Custom color\n * @return Custom color group\n *\n * @link https://m3.material.io/styles/color/the-color-system/color-roles\n */\nexport function customColor(\n  source: number, color: CustomColor): CustomColorGroup {\n  let value = color.value;\n  const from = value;\n  const to = source;\n  if (color.blend) {\n    value = Blend.harmonize(from, to);\n  }\n  const palette = CorePalette.of(value);\n  const tones = palette.a1;\n  return {\n    color,\n    value,\n    light: {\n      color: tones.tone(40),\n      onColor: tones.tone(100),\n      colorContainer: tones.tone(90),\n      onColorContainer: tones.tone(10),\n    },\n    dark: {\n      color: tones.tone(80),\n      onColor: tones.tone(20),\n      colorContainer: tones.tone(30),\n      onColorContainer: tones.tone(90),\n    },\n  };\n}\n\n/**\n * Apply a theme to an element\n *\n * @param theme Theme object\n * @param options Options\n */\nexport function applyTheme(theme: Theme, options?: {\n  dark?: boolean,\n  target?: HTMLElement,\n  brightnessSuffix?: boolean,\n  paletteTones?: number[],\n}) {\n  const target = options?.target || document.body;\n  const isDark = options?.dark ?? false;\n  const scheme = isDark ? theme.schemes.dark : theme.schemes.light;\n  setSchemeProperties(target, scheme);\n  if (options?.brightnessSuffix) {\n    setSchemeProperties(target, theme.schemes.dark, '-dark');\n    setSchemeProperties(target, theme.schemes.light, '-light');\n  }\n  if (options?.paletteTones) {\n    const tones = options?.paletteTones ?? [];\n    for (const [key, palette] of Object.entries(theme.palettes)) {\n      const paletteKey = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n      for (const tone of tones) {\n        const token = `--md-ref-palette-${paletteKey}-${paletteKey}${tone}`;\n        const color = hexFromArgb(palette.tone(tone));\n        target.style.setProperty(token, color);\n      }\n    }\n  }\n}\n\nexport function setSchemeProperties(\n  target: HTMLElement,\n  scheme: Scheme,\n  suffix: string = '',\n) {\n  for (const [key, value] of Object.entries(scheme.toJSON())) {\n    const token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const color = hexFromArgb(value);\n    target.style.setProperty(`--md-sys-color-${token}${suffix}`, color);\n  }\n}\n// --- END FILE: utils/theme_utils.ts ---\n"]}